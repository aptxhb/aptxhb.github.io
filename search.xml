<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文本三剑客sed的使用</title>
      <link href="/2022/05/03/wen-ben-san-jian-ke-sed-de-shi-yong/"/>
      <url>/2022/05/03/wen-ben-san-jian-ke-sed-de-shi-yong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>article title</title>
      <link href="/2022/05/02/article-title/"/>
      <url>/2022/05/02/article-title/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/01/hello-world/"/>
      <url>/2022/05/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>5W2H | 关于写博客的七点反思</title>
      <link href="/2020/01/14/5w2h-godweiyang/"/>
      <url>/2020/01/14/5w2h-godweiyang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【算法码上来】，每日算法干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg"></p><h2 id="When？什么时候开始写的？"><a href="#When？什么时候开始写的？" class="headerlink" title="When？什么时候开始写的？"></a>When？什么时候开始写的？</h2><p>第一次写博客是 2015 年了，在 CSDN 和博客园上面，当时写文章是为了记录 ACM 竞赛的题解，陆陆续续写了几十篇。但是最后还是没有坚持下去，主要还是因为 CSDN 和博客园的体验太差了，写起文章来很难受，又丑又慢。另一个原因是， CSDN 发个文章还需要审核，定制主题自由度也太差。</p><p>第二次就是 2017 年暑假了，当时自己建了个人博客，域名是：<a href="https://godweiyang.com/">godweiyang.com</a>。当时的想法是，个人博客好好看，有各种主题，如果会点前端知识，还能自己魔改。个人博客主要更新的就是自然语言处理的知识了，主要都是些论文的阅读赏析。另外还更新一些计算机相关的基础知识，主要考虑到绝大多数人并不会对枯燥又专业的自然语言处理感兴趣。算法题解的话最近也开始更新起来了，主要写一些 LeetCode上面的题解。</p><p>最后就是知乎专栏和微信公众号了，这两个平台是最近才搞的，主要把个人博客的文章同步更新过去，内容都差不多。微信公众号本来不想搞的，不支持 markdown ，写起来挺麻烦的。但是考虑到以后的发展，以及可能会有一些变现的操作，还是重操旧业了（其实我公众号两年前就注册过了，只是一直没有更新）。</p><h2 id="Why？为什么会想起来写博客？"><a href="#Why？为什么会想起来写博客？" class="headerlink" title="Why？为什么会想起来写博客？"></a>Why？为什么会想起来写博客？</h2><p>其实刚开始写博客，主要还是为了记录自己平时学到的一些东西，以后可能还能翻出来复习复习。但是现在看来，基本不会再去翻以前写的东西了。</p><p>另一个目的，也是我写博客最主要的目的，还是想分享我知道的一些东西，能够让更多的人因此受益。因为写博客，其实还是认识了不少天南地北的朋友的，有各个高校甚至初高中的学生，也有工作了很多年想学习学习编程的，也有国外一些名校的学生。不管是谁，我觉得都可以扩展我的人脉，现在微信好友人数上限扩展到了 5000 人了，而我才用了十分之一多一点，什么时候能达到上限也算是圆满了。</p><p>最后，有句话叫做：“不以盈利为目的的博客最后都死亡了”。因为如果不能因此获得任何的收入的话，极少有人有这个毅力坚持更新博客。虽然我也想因此获利，但是暂时我并不想因此改变了初衷，去写一些刻意迎合大众的水文，从而获得粉丝。</p><h2 id="What？都写一些什么主题的博客？"><a href="#What？都写一些什么主题的博客？" class="headerlink" title="What？都写一些什么主题的博客？"></a>What？都写一些什么主题的博客？</h2><p>主要都是与我相关的一些计算机相关知识。最主要的就是深度学习和自然语言处理了，但是因为我是做句法分析的，这个方向受众比较小，如果纯粹写这个方向的内容的话，看的人可能会很少。而如果写深度学习和自然语言处理的入门普及或者综合一点热门一点的方向的话，看得人应该会很多。但是这样又有一个弊端，非常的浪费我时间，因为过于基础的知识对我的提升微乎其微，只适合以后我面试前看看补补基础。而主要我现在重心还在发论文，继续搞学术，所以只能写一些结合我最近所学知识的文章。</p><p>还会写一些算法题解，现在主要在做 LeetCode 上面的中等和困难题目，然后每日一更。尽管网上各种 LeetCode 的题解已经太多了，但是我觉得，大多数的题解都非常的模糊，讲解的很不清楚，抄来抄去的有什么意思？而他们的代码风格，更是让我看不下去，最基本的美观都做不到，代码的简洁精炼就更不用谈了。所以我的目的还是尽量用美观精炼的代码来让更多人的算法思想和代码能力得到提升。</p><p>偶尔，我还会分享一些计算机基础知识，比如怎么搭博客（这是我阅读量最高的一篇博客了）、好用的软件、常用的一些软件的安装配置等等。其实讲道理，我是不愿意写这一类文章的，因为非常的费时费力，需要自己动手模拟一遍，确保能够正确完成才能写进文章。不然就会像很多网上的教程那样，抄来抄去一堆错误，根本没有自己动手实践过。但是这种文章其实对很多人帮助还挺大的，大家也乐意去看，如果你在知乎发的话，你会发现这类文章收藏量都挺高的。如果我以后用空了，我还是会经常把我平时的一些经验分享给大家的，比如 LaTeX 常用写作技巧之类的。</p><p>那么其他火的博客都写些什么呢？我觉得当代人闲暇时候、上厕所刷手机的时候，那些碎片时间是没办法好好学习一些知识的，最爱看的还是有趣的故事，例如 99 行代码做出冰雪奇缘特效、程序员脱发、程序员单身狗啦之类的。这些故事背后的技术可能是很深奥的，但是大多数人并不会去关心，只是会看完惊叹一句“卧槽”而已。其他的吸引人的内容还有资料下载、课程学习（当然基本都是广告）等等。不过我个人目前并不想写这些东西，首先这些新闻类的文章很多地方都有了，写来写去就那么些东西，同质化严重。而资料下载确实是个不错的主意，可以分享好东西给大家，但是我个人最近也没有太多值得珍藏的好资料，况且大多数网上都有现成的，我不赞同为了增加粉丝而不放出链接，把资料放在公众号后台的行为。</p><p>总之，不忘初心，粉丝什么的随缘吧。我非常佛系，即使没人看我也会日常更新，就当记日记不是吗？</p><h2 id="Who？写出来的博客都是给谁看的？"><a href="#Who？写出来的博客都是给谁看的？" class="headerlink" title="Who？写出来的博客都是给谁看的？"></a>Who？写出来的博客都是给谁看的？</h2><p>大多数看我博客的都是自然语言处理相关的学生。就拿我在知乎专栏的粉丝来看，大多数人是来看我的论文赏析的，而少部分人是看到了那篇博客搭建教程来的。至于算法题解，貌似并没有很多人看，可能这一类文章网上实在是太多了，没有什么独特的吸引力。而公众号粉丝，目前为止还很少，绝大多数还都是好友粉丝。主要原因还是公众号太封闭了，很难让好友之外的人知道并且关注你。一个方法可以在知乎等平台引流，但是现在这属于违规操作，最好还是不要干了。</p><p>其实我目标的受众群体还是包括但不仅限于计算机系的学生，像一些计算机基础知识，就算你是个小白，也可以从这里学到很多东西。甚至还有很多考研的学生来咨询我问题，虽然我是保研的，但是很多导师选取、学习方面的问题我还是愿意给出我自己的建议的。我这个人向来喜欢分享，也喜欢倾听，如果别人来问我问题，我基本是会耐心回答的。曾经有啥都不会的小白来问我怎么搭建博客，我得从最基本的命令行教他，讲道理这其实很烦，我都不想教，但我还是会尽量把关键点都告诉他。有人会觉得，我这样最后会得到什么呢？是的，也不赚钱，最多偶尔有些朋友会打赏个红包，我还浪费了大把时间（其实还好，白天工作的时候我都简单回复，晚上一般会详细点），但是认识的人多了，许多人还是多少知道我这个名字的，虽然没啥用，但是也算是种隐形财富吧，以后有什么用再说。</p><h2 id="Where？都在什么平台写博客呢？"><a href="#Where？都在什么平台写博客呢？" class="headerlink" title="Where？都在什么平台写博客呢？"></a>Where？都在什么平台写博客呢？</h2><p>这个其实上面都说过了，我现在文章主要更新在个人博客、知乎专栏、微信公众号和 CSDN 上面，我简要说一些这些平台的优缺点吧。</p><p>个人博客可以个性化定制主题，想怎么好看就怎么好看，还不用发文章审核，想发什么就发什么。但是缺点就是发文章麻烦一点的，步骤略多，并且搜索引擎收录很慢的。</p><p>知乎专栏是我比较喜欢的一个平台，主要是它支持markdown，还可以把公式变成矢量图片，还是挺不错的。但是发知乎文章要注意千万别带着营销、引流等内容，不然容易被人举报被删除甚至禁言。</p><p>微信公众号是我最近才开始运营的，相对而言，它的编辑界面是最不友好的一个，只支持富文本编辑，连markdown都没有。但是也有解决方法，比如我现在用<a href="https://mdnice.com/">mdnice.com</a>这个网站，把markdown转换成微信公众号的富文本格式，还是非常好用的。公众号还有个缺点，太封闭了，很难宣传出去，刚开始只能亲朋好友关注关注，但是如果你真的做大了知名度，还是可以借助微信的优势，赚得不少广告钱的。</p><p>CSDN因为几年前被永久封过号，然后现在不知道为什么又被解封了，所以用的不是特别多，主要都是通过知乎专栏自动同步文章过去的。CSDN 好处就是流量大，很多人都在上面搜东西，百度搜出来也基本都是 CSDN ，但是排版是真的真的烂，不过现在好多了，也支持 markdown 了。但是还是谈不上喜欢，广告什么的都太多了，除非迫不得已，我一般不去 CSDN 看技术文章，我一般都是个人博客或者知乎看论文解读之类的。</p><h2 id="How？按照什么流程来写博客？"><a href="#How？按照什么流程来写博客？" class="headerlink" title="How？按照什么流程来写博客？"></a>How？按照什么流程来写博客？</h2><p>其实同时维护好几个平台还是挺累的，你得找到一个最佳的顺序来发布文章，这样才能事半功倍。我一般都是先在个人博客上写好 markdown 文章，然后发布完之后，打开<a href="https://mdnice.com/">mdnice.com</a>在线编辑网站，把 markdown 粘贴进去，转成微信公众号和知乎专栏的格式，最后分别发布在两个地方就行了。 CSDN 就不用管了，它会每天自动同步知乎专栏的文章的，倒是为我省了不少事。markdown 写作也挺轻松的，完全不用管排版之类的问题，安安心心写内容就行了。</p><p>微信公众号现在设置的是每天早上 8:05 推送，其实稍微晚一点比较好，这样别人的都推送完了，你的就会置顶在最上面。而知乎专栏和个人博客我就随性发布了，想什么时候发就什么时候发，经常会前一天就写好内容，早早的发布出去了。</p><p>我个人现在来看，写一篇博客最累的是敲公式和找图片，当然像我这篇就一个公式和图都没有，是最最轻松的了。我这个人有强迫症，公式一定要手打 LaTeX 公式，然后转成矢量图才行，这样看着又清楚又舒服。遇到复杂的矩阵公式，能把我敲的头晕。这也是我为什么不喜欢 CSDN 的一个原因，上面很多文章公式全是截图，看的我头都大了。</p><h2 id="How-much？要花多少时间和金钱来运营维护？"><a href="#How-much？要花多少时间和金钱来运营维护？" class="headerlink" title="How much？要花多少时间和金钱来运营维护？"></a>How much？要花多少时间和金钱来运营维护？</h2><p>写博客挺花时间的，特别是现在还在为发论文而忙活的时候，可能论文截稿前那段时间甚至我会停更好久哈哈。不过现在放假了，还算比较闲，有功夫搞搞这些。我个人是倾向于白天还是老老实实学习吧，晚上把部分的游戏时间抽出来写会儿文章，更新一波。这样也不算太浪费时间，毕竟就算不写，时间也都用来打游戏了，游戏输了还坏了心情（我的亚索怎么会输？）。</p><p>那什么时候做 LeetCode 呢？我一般都是白天吃饭时，或者走在路上时，手机 app 上随机选一道题，然后吃个饭的时间就能想出个解法，回到实验室后敲一顿代码通过了就行了。这样看来也节约了不少时间嘛，还能和室友一起讨论讨论，帮他提高一波算法能力。</p><p>金钱的话就基本没有花销了，除了开了个素材设计网站的会员（我是真的睿智，用 PS 不就行了嘛，脑子瓦特了充钱了）以外，其他不需要啥了，偶尔还能吃点打赏钱，粉丝太少了，没有广告。</p><p>因为写文章这上面花时间比较多，写出好的文章、不水文章的话花的时间更多，所以很容易坚持不下去。而又要迎合大众的口味，众口难调嘛，又要坚持自己的初心，尽量写对自己提升大的内容，还是比较难以平衡的。特别是粉丝特别少，没有什么人看的时候，你会很想放弃。</p><p>但是，总会有人在你坚持不下去的时候，给你鼓励的目光，支持你继续走下去的。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Containerd二进制部署K8s</title>
      <link href="/2018/09/07/ji-yu-containerd-er-jin-zhi-bu-shu-k8s/"/>
      <url>/2018/09/07/ji-yu-containerd-er-jin-zhi-bu-shu-k8s/</url>
      
        <content type="html"><![CDATA[<p><strong>基于containerd二进制部署k8s</strong></p><p><strong>声明：</strong></p><p>因部署涉及多台主机期间重复操作过多各组件脚本与配置大致相同固只贴出一份作为参考，参数有异部分大多数为主机名与IP，部署期间注意修改为对应角色信息。操作命令前注意标识符<code>主机名</code>与<code>目录级别</code>，下面是标识符的书写规则。</p><p>例：[root@k8s-master4 ~]#</p><p>第一列：当前用户，隐藏为默认root操作</p><p>第二列：主机名，隐藏则为当前组件的规划主机都要执行，否则只操作当前主机</p><p>第三列：当前目录，注意切换对应目录级别在操作</p><p>示例一：<code>k8s-master4 opt]# pwd</code> 表示只在k8s-master4主机执行操作</p><p>示例二：<code>opt]# pwd</code> 表示安装组件的规划主机内都要执行此操作 如下图：keepalived组件只需在<code>k8s-master4</code>、<code>k8s-node4-1</code>节点上执行</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014093216431.png" alt="image-20211014093216431"></p><h5 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h5><table><thead><tr><th>主机名</th><th>IP</th><th>系统</th><th>资源</th><th>k8s-version</th><th>CRI</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>centos 7.8</td><td>2c4G</td><td>v1.17.16</td><td>containerd://1.5.5</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>centos 7.8</td><td>2c4G</td><td>v1.17.16</td><td>containerd://1.5.5</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>centos 7.8</td><td>2c4G</td><td>v1.17.16</td><td>containerd://1.5.5</td></tr></tbody></table><h6 id="系统版本："><a href="#系统版本：" class="headerlink" title="系统版本："></a>系统版本：</h6><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># uname -a</span>Linux k8s-master4 3.10.0-1160.el7.x86_64 <span class="token comment" spellcheck="true">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名:"></a>设置主机名:</h6><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># hostnamectl set-hostname k8s-master4</span><span class="token comment" spellcheck="true"># hostnamectl set-hostname k8s-node4-1</span><span class="token comment" spellcheck="true"># hostnamectl set-hostname k8s-node4-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="设置hosts本机解析："><a href="#设置hosts本机解析：" class="headerlink" title="设置hosts本机解析："></a>设置hosts本机解析：</h6><pre class="line-numbers language-shell"><code class="language-shell"># cat /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.92.155k8s-master4192.168.92.156k8s-node4-1192.168.92.157k8s-node4-2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="关闭防火墙及selinux："><a href="#关闭防火墙及selinux：" class="headerlink" title="关闭防火墙及selinux："></a>关闭防火墙及selinux：</h6><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># systemctl stop firewalld</span><span class="token comment" spellcheck="true"># systemctl disable firewalld</span><span class="token comment" spellcheck="true"># sed -e 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/config</span><span class="token comment" spellcheck="true"># setenforce 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="关闭swap分区："><a href="#关闭swap分区：" class="headerlink" title="关闭swap分区："></a>关闭swap分区：</h6><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># swapoff -a</span><span class="token comment" spellcheck="true"># grep swap /etc/fstab</span><span class="token comment" spellcheck="true"># /dev/mapper/centos-swap swap                    swap    defaults        0 0  # 注释swap挂载分区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="设置时间同步"><a href="#设置时间同步" class="headerlink" title="设置时间同步"></a>设置时间同步</h6><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><span class="token comment" spellcheck="true"># yum -y install ntpdate</span><span class="token comment" spellcheck="true"># ntpdate ntp.aliyun.com</span><span class="token comment" spellcheck="true"># cat > /root/cron_file &lt;&lt; EOF</span>*/2 * * * * ntpdate ntp.aliyun.com <span class="token operator">&amp;</span><span class="token operator">></span> /dev/nullEOF<span class="token comment" spellcheck="true"># crontab /root/cron_file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>因为这是本地虚拟机没有安装时间同步服务，所以只用命令简单同步时间。生产环境不要按照此方法。</p><h6 id="开启内核模块"><a href="#开启内核模块" class="headerlink" title="开启内核模块"></a>开启内核模块</h6><pre class="line-numbers language-bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat > /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> 1net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> 1net.ipv4.ip_forward <span class="token operator">=</span> 1vm.swappiness <span class="token operator">=</span> 0EOF~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat > ipvs.sh &lt;&lt; "EOF"</span><span class="token comment" spellcheck="true">#!/bin/bash</span>/sbin/modprobe br_netfilter/sbin/modprobe -- nf_conntrack_ipv4ipvs_mods_dir<span class="token operator">=</span><span class="token string">"/usr/lib/modules/<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -r<span class="token variable">)</span></span>/kernel/net/netfilter/ipvs"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">$(</span>ls <span class="token variable">$ipvs_mods_dir</span><span class="token operator">|</span><span class="token function">grep</span> -o <span class="token string">"^[^.]*"</span><span class="token punctuation">)</span><span class="token keyword">do</span>  /sbin/modinfo -F filename <span class="token variable">$i</span> <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    /sbin/modprobe <span class="token variable">$i</span>  <span class="token keyword">fi</span><span class="token keyword">done</span>EOF~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sysctl -p /etc/sysctl.d/k8s.conf</span>~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod +x ipvs.sh</span>~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./ipvs.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一、自签k8s所需证书"><a href="#一、自签k8s所需证书" class="headerlink" title="一、自签k8s所需证书"></a>一、自签k8s所需证书</h4><p><strong>说明：</strong>证书只在管理节点生成，然后按节点角色拷贝证书秘钥至主机。注意秘钥的权限是<code>600</code>拷贝加上<code>-p</code>参数。</p><ol><li><h6 id="安装cfssl"><a href="#安装cfssl" class="headerlink" title="安装cfssl"></a>安装cfssl</h6></li></ol><p><a href="https://pkg.cfssl.org/R1.2/cfssl_linux-amd64">cfssl 下载地址</a></p><p><a href="https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64">cfssl-json 下载地址</a></p><p><a href="https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64">cfssl-certinfo 下载地址</a></p><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/local/sbin/cfssl</span>k8s-master4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/local/sbin/cfssl-json</span>k8s-master4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/local/sbin/cfssl-certinfo</span>k8s-master4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod +x /usr/local/sbin/cfssl*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012113552567.png" alt="image-20211012113552567"></p><ol start="2"><li><h6 id="创建CA证书签名请求配置文件ca-csr-json"><a href="#创建CA证书签名请求配置文件ca-csr-json" class="headerlink" title="创建CA证书签名请求配置文件ca-csr.json"></a>创建CA证书签名请求配置文件<code>ca-csr.json</code></h6></li></ol><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /opt/certs/</span>k8s-master4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat > /opt/certs/ca-csr.json &lt;&lt; EOF</span><span class="token punctuation">{</span>    <span class="token string">"CN"</span><span class="token keyword">:</span> <span class="token string">"HuaCloud"</span>,    <span class="token string">"hosts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">]</span>,    <span class="token string">"key"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"algo"</span><span class="token keyword">:</span> <span class="token string">"rsa"</span>,        <span class="token string">"size"</span><span class="token keyword">:</span> 2048    <span class="token punctuation">}</span>,    <span class="token string">"names"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"C"</span><span class="token keyword">:</span> <span class="token string">"CN"</span>,            <span class="token string">"ST"</span><span class="token keyword">:</span> <span class="token string">"shenzhen"</span>,            <span class="token string">"L"</span><span class="token keyword">:</span> <span class="token string">"shenzhen"</span>,            <span class="token string">"O"</span><span class="token keyword">:</span> <span class="token string">"IT"</span>,            <span class="token string">"OU"</span><span class="token keyword">:</span> <span class="token string">"ops"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span>,    <span class="token string">"ca"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"expiry"</span><span class="token keyword">:</span> <span class="token string">"175200h"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CN：Common Name，浏览器使用该字段验证网站是否合法，一般写的是域名，非常重要。</li><li>C：Country。国家</li><li>ST：State，州，省</li><li>L：Locality，城区，城市</li><li>O：Organization Name，组织名称，公司名称</li><li>OU：Organization Unit Name。组织单位名称，公司部门</li></ul><ol start="3"><li><h6 id="生成CA证书和私钥"><a href="#生成CA证书和私钥" class="headerlink" title="生成CA证书和私钥"></a>生成CA证书和私钥</h6></li></ol><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 certs<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cfssl gencert -initca ca-csr.json | cfssl-json -bare ca</span>k8s-master4 certs<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012114912559.png" alt="image-20211012114912559"></p><h5 id="签发-etcd-证书"><a href="#签发-etcd-证书" class="headerlink" title="签发 etcd 证书"></a>签发 etcd 证书</h5><ol><li><h6 id="创建基于根证书的配置文件"><a href="#创建基于根证书的配置文件" class="headerlink" title="创建基于根证书的配置文件"></a>创建基于根证书的配置文件</h6></li></ol><pre class="line-numbers language-json"><code class="language-json">k8s-master4 certs<span class="token punctuation">]</span># cat > ca-config.json &lt;&lt; EOF<span class="token punctuation">{</span>    <span class="token property">"signing"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"default"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"expiry"</span><span class="token operator">:</span> <span class="token string">"175200h"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"profiles"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"server"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"expiry"</span><span class="token operator">:</span> <span class="token string">"175200h"</span><span class="token punctuation">,</span>                <span class="token property">"usages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"signing"</span><span class="token punctuation">,</span>                    <span class="token string">"key encipherment"</span><span class="token punctuation">,</span>                    <span class="token string">"server auth"</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"client"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"expiry"</span><span class="token operator">:</span> <span class="token string">"175200h"</span><span class="token punctuation">,</span>                <span class="token property">"usages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"signing"</span><span class="token punctuation">,</span>                    <span class="token string">"key encipherment"</span><span class="token punctuation">,</span>                    <span class="token string">"client auth"</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"peer"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"expiry"</span><span class="token operator">:</span> <span class="token string">"175200h"</span><span class="token punctuation">,</span>                <span class="token property">"usages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"signing"</span><span class="token punctuation">,</span>                    <span class="token string">"key encipherment"</span><span class="token punctuation">,</span>                    <span class="token string">"server auth"</span><span class="token punctuation">,</span>                    <span class="token string">"client auth"</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>client certificate：客户端使用，用于服务端认证客户端，例如etcdctl、etcd proxy、fleetctl、docker客户端</li><li>server certificate：服务器端使用，客户端已验证服务端身份，例如docker服务端、kube-apiserver</li><li>peer certificate：双向证书，用于etcd集群成员间通信</li></ul><ol start="2"><li><h6 id="创建证书签名请求的配置文件"><a href="#创建证书签名请求的配置文件" class="headerlink" title="创建证书签名请求的配置文件"></a>创建证书签名请求的配置文件</h6></li></ol><pre class="line-numbers language-json"><code class="language-json">k8s-master4 certs<span class="token punctuation">]</span># cat > etcd-peer-csr.json &lt;&lt; EOF<span class="token punctuation">{</span>    <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"k8s-etcd"</span><span class="token punctuation">,</span>    <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"192.168.92.155"</span><span class="token punctuation">,</span>        <span class="token string">"192.168.92.156"</span><span class="token punctuation">,</span>        <span class="token string">"192.168.92.157"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>            <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"IT"</span><span class="token punctuation">,</span>            <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"ops"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>hosts</code>：etcd 节点有多少就对应修改</p><ol start="3"><li><h6 id="签发etcd证书和私钥"><a href="#签发etcd证书和私钥" class="headerlink" title="签发etcd证书和私钥"></a>签发etcd证书和私钥</h6></li></ol><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 certs<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer etcd-peer-csr.json|cfssl-json -bare etcd-peer</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012120531731.png" alt="image-20211012120531731"></p><h5 id="签发-client-证书"><a href="#签发-client-证书" class="headerlink" title="签发 client 证书"></a>签发 client 证书</h5><ol><li><h6 id="创建证书签名请求的配置文件-1"><a href="#创建证书签名请求的配置文件-1" class="headerlink" title="创建证书签名请求的配置文件"></a>创建证书签名请求的配置文件</h6></li></ol><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 certs<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat > client-csr.json &lt;&lt; EOF</span><span class="token punctuation">{</span>    <span class="token string">"CN"</span><span class="token keyword">:</span> <span class="token string">"k8s-node"</span>,    <span class="token string">"hosts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">]</span>,    <span class="token string">"key"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"algo"</span><span class="token keyword">:</span> <span class="token string">"rsa"</span>,        <span class="token string">"size"</span><span class="token keyword">:</span> 2048    <span class="token punctuation">}</span>,    <span class="token string">"names"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"C"</span><span class="token keyword">:</span> <span class="token string">"CN"</span>,            <span class="token string">"ST"</span><span class="token keyword">:</span> <span class="token string">"shenzhen"</span>,            <span class="token string">"L"</span><span class="token keyword">:</span> <span class="token string">"shenzhen"</span>,            <span class="token string">"O"</span><span class="token keyword">:</span> <span class="token string">"IT"</span>,            <span class="token string">"OU"</span><span class="token keyword">:</span> <span class="token string">"ops"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><h6 id="签发client证书和私钥"><a href="#签发client证书和私钥" class="headerlink" title="签发client证书和私钥"></a>签发client证书和私钥</h6></li></ol><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 certs<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client client-csr.json |cfssl-json -bare client</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012122819509.png" alt="image-20211012122819509"></p><h5 id="签发-kube-apiserver-证书"><a href="#签发-kube-apiserver-证书" class="headerlink" title="签发 kube-apiserver 证书"></a>签发 kube-apiserver 证书</h5><ol><li><h6 id="创建证书请求配置文件"><a href="#创建证书请求配置文件" class="headerlink" title="创建证书请求配置文件"></a>创建证书请求配置文件</h6></li></ol><pre class="line-numbers language-json"><code class="language-json">k8s-master4 certs<span class="token punctuation">]</span># cat > apiserver-csr.json &lt;&lt; EOF<span class="token punctuation">{</span>    <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"k8s-apiserver"</span><span class="token punctuation">,</span>    <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>        <span class="token string">"10.96.0.1"</span><span class="token punctuation">,</span>        <span class="token string">"kubernetes.default"</span><span class="token punctuation">,</span>        <span class="token string">"kubernetes.default.svc"</span><span class="token punctuation">,</span>        <span class="token string">"kubernetes.default.svc.cluster"</span><span class="token punctuation">,</span>        <span class="token string">"kubernetes.default.svc.cluster.local"</span><span class="token punctuation">,</span>        <span class="token string">"192.168.92.154"</span><span class="token punctuation">,</span> // vip        <span class="token string">"192.168.92.155"</span><span class="token punctuation">,</span>        <span class="token string">"192.168.92.156"</span><span class="token punctuation">,</span>        <span class="token string">"192.168.92.157"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>            <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"IT"</span><span class="token punctuation">,</span>            <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"ops"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><h6 id="签发apiserver证书和私钥"><a href="#签发apiserver证书和私钥" class="headerlink" title="签发apiserver证书和私钥"></a>签发apiserver证书和私钥</h6></li></ol><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 certs<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server apiserver-csr.json |cfssl-json -bare apiserver</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012151403019.png" alt="image-20211012151403019"></p><h5 id="签发kubelet证书"><a href="#签发kubelet证书" class="headerlink" title="签发kubelet证书"></a>签发kubelet证书</h5><ol><li><h6 id="创建证书请求配置文件-1"><a href="#创建证书请求配置文件-1" class="headerlink" title="创建证书请求配置文件"></a>创建证书请求配置文件</h6></li></ol><pre class="line-numbers language-json"><code class="language-json">k8s-master4 certs<span class="token punctuation">]</span># cat > kubelet-csr.json &lt;&lt; EOF<span class="token punctuation">{</span>    <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"k8s-kubelet"</span><span class="token punctuation">,</span>    <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    <span class="token string">"192.168.92.154"</span><span class="token punctuation">,</span> // vip    <span class="token string">"192.168.92.155"</span><span class="token punctuation">,</span>    <span class="token string">"192.168.92.156"</span><span class="token punctuation">,</span>    <span class="token string">"192.168.92.157"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>            <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"IT"</span><span class="token punctuation">,</span>            <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"ops"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><h6 id="签发kubelet证书和私钥"><a href="#签发kubelet证书和私钥" class="headerlink" title="签发kubelet证书和私钥"></a>签发kubelet证书和私钥</h6></li></ol><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 certs<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server kubelet-csr.json | cfssl-json -bare kubelet</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012152028883.png" alt="image-20211012152028883"></p><h5 id="签发kube-proxy证书"><a href="#签发kube-proxy证书" class="headerlink" title="签发kube-proxy证书"></a>签发kube-proxy证书</h5><ol><li><h6 id="创建证书请求配置文件-2"><a href="#创建证书请求配置文件-2" class="headerlink" title="创建证书请求配置文件"></a>创建证书请求配置文件</h6></li></ol><pre class="line-numbers language-json"><code class="language-json">k8s-master4 certs<span class="token punctuation">]</span># cat > kube-proxy-csr.json &lt;&lt; EOF<span class="token punctuation">{</span>    <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"system:kube-proxy"</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>            <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"IT"</span><span class="token punctuation">,</span>            <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"ops"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><h6 id="签发kube-proxy证书和私钥"><a href="#签发kube-proxy证书和私钥" class="headerlink" title="签发kube-proxy证书和私钥"></a>签发kube-proxy证书和私钥</h6></li></ol><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 certs<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client kube-proxy-csr.json |cfssl-json -bare kube-proxy-client</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012152450818.png" alt="image-20211012152450818"></p><p>注意：这里的clent不能与其他的通用，上面CN变了，<code>"CN": "system:kube-proxy"</code></p><h5 id="签发metrics-server证书"><a href="#签发metrics-server证书" class="headerlink" title="签发metrics server证书"></a>签发metrics server证书</h5><ol><li><h6 id="创建metrics-server证书请求配置文件"><a href="#创建metrics-server证书请求配置文件" class="headerlink" title="创建metrics server证书请求配置文件"></a>创建metrics server证书请求配置文件</h6></li></ol><pre class="line-numbers language-json"><code class="language-json">k8s-master4 certs<span class="token punctuation">]</span># cat > metrics-server-csr.json &lt;&lt; EOF<span class="token punctuation">{</span>  <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"system:kube-proxy"</span><span class="token punctuation">,</span>  <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>    <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>      <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>      <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>      <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"metrics-proxy"</span><span class="token punctuation">,</span>      <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"IT"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><h6 id="签发metrics-server证书和私钥"><a href="#签发metrics-server证书和私钥" class="headerlink" title="签发metrics server证书和私钥"></a>签发metrics server证书和私钥</h6></li></ol><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 certs<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client metrics-server-csr.json  | cfssl-json -bare metrics-proxy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012153211111.png" alt="image-20211012153211111"></p><h4 id="二、部署Contianerd"><a href="#二、部署Contianerd" class="headerlink" title="二、部署Contianerd"></a>二、部署Contianerd</h4><h5 id="1-部署containerd"><a href="#1-部署containerd" class="headerlink" title="1. 部署containerd"></a>1. 部署containerd</h5><h6 id="集群规划："><a href="#集群规划：" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机名</th><th>IP</th><th>版本</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>containerd://1.5.5</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>containerd://1.5.5</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>containerd://1.5.5</td></tr></tbody></table><h6 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h6><p><a href="https://github.com/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz">containerd 下载链接</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mkdir /opt/src &amp;&amp; cd /opt/src</span><span class="token comment" spellcheck="true"># wget https://github.com/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="解压containerd软件包"><a href="#解压containerd软件包" class="headerlink" title="解压containerd软件包"></a>解压containerd软件包</h6><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># tar -xf cri-containerd-cni-1.5.5-linux-amd64.tar.gz -C /</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h6><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mkdir /etc/containerd</span><span class="token comment" spellcheck="true"># containerd config default > /etc/containerd/config.toml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="修改配置config-toml"><a href="#修改配置config-toml" class="headerlink" title="修改配置config.toml"></a>修改配置config.toml</h6><pre><code>...sandbox_image = "docker.io/kubernetes/pause:latest"...# conf_dir = "/etc/cni/net.d"...SystemdCgroup = true...      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]         [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]            endpoint = ["https://uwa9by0v.mirror.aliyuncs.com"]         [plugins."io.containerd.grpc.v1.cri".registry.mirrors."k8s.gcr.io"]            endpoint = ["http://registry.aliyuncs.com/k8sxio"]...</code></pre><p>以上是需要修改的内容</p><h6 id="启动并设置开机自启"><a href="#启动并设置开机自启" class="headerlink" title="启动并设置开机自启"></a>启动并设置开机自启</h6><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># systemctl enable containerd --now</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="三、部署主控节点组件"><a href="#三、部署主控节点组件" class="headerlink" title="三、部署主控节点组件"></a>三、部署主控节点组件</h4><h5 id="1-安装etcd集群"><a href="#1-安装etcd集群" class="headerlink" title="1. 安装etcd集群"></a>1. 安装etcd集群</h5><h6 id="集群规划：-1"><a href="#集群规划：-1" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机名</th><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>k8s-master4</td><td>etcd leader</td><td>192.168.92.155</td></tr><tr><td>k8s-node4-1</td><td>etcd foolow</td><td>192.168.92.156</td></tr><tr><td>k8s-node4-2</td><td>etcd foolow</td><td>192.168.92.157</td></tr></tbody></table><h6 id="下载软件、解压、做软连接："><a href="#下载软件、解压、做软连接：" class="headerlink" title="下载软件、解压、做软连接："></a>下载软件、解压、做软连接：</h6><pre class="line-numbers language-bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir /opt/src &amp;&amp; cd /opt/src</span>src<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget https://github.com/etcd-io/etcd/releases/download/v3.1.20/etcd-v3.1.20-linux-amd64.tar.gz</span>src<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -xf etcd-v3.1.20-linux-amd64.tar.gz -C /opt/</span>src<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /opt/</span>opt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mv etcd-v3.1.20-linux-amd64/ etcd-v3.1.20</span>opt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s /opt/etcd-v3.1.20/ /opt/etcd</span>opt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013135838293.png" alt="image-20211013135838293"></p><h6 id="创建目录，拷贝证书、私钥："><a href="#创建目录，拷贝证书、私钥：" class="headerlink" title="创建目录，拷贝证书、私钥："></a>创建目录，拷贝证书、私钥：</h6><pre class="line-numbers language-bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd -s /sbin/nologin  -M etcd</span>~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /opt/etcd/certs /data/etcd /data/logs/etcd-server</span>~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># scp -p /opt/certs/etcd-peer-key.pem 192.168.92.155:/opt/etcd/certs/</span>~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># scp -p /opt/certs/etcd-peer.pem  192.168.92.155:/opt/etcd/certs/</span>~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># scp -p /opt/certs/ca.pem 192.168.92.155:/opt/etcd/certs/</span>~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chown -R etcd.etcd /opt/etcd/certs /data/etcd /data/logs/etcd-server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="创建启动脚本："><a href="#创建启动脚本：" class="headerlink" title="创建启动脚本："></a>创建启动脚本：</h6><pre class="line-numbers language-bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /opt/etcd/</span>etcd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat > etcd-server-startup.sh &lt;&lt; EOF</span><span class="token comment" spellcheck="true">#!/bin/sh</span>./etcd --name etcd-server-155 \       --data-dir /data/etcd/etcd-server \       --listen-peer-urls https://192.168.92.155:2380 \       --listen-client-urls https://192.168.92.155:2379,http://127.0.0.1:2379 \       --quota-backend-bytes 8000000000 \       --initial-advertise-peer-urls https://192.168.92.155:2380 \       --advertise-client-urls https://192.168.92.155:2379,http://127.0.0.1:2379 \       --initial-cluster  etcd-server-155<span class="token operator">=</span>https://192.168.92.155:2380,etcd-server-156<span class="token operator">=</span>https://192.168.92.156:2380,etcd-server-157<span class="token operator">=</span>https://192.168.92.157:2380 \       --ca-file ./certs/ca.pem \       --cert-file ./certs/etcd-peer.pem \       --key-file ./certs/etcd-peer-key.pem \       --client-cert-auth  \       --trusted-ca-file ./certs/ca.pem \       --peer-ca-file ./certs/ca.pem \       --peer-cert-file ./certs/etcd-peer.pem \       --peer-key-file ./certs/etcd-peer-key.pem \       --peer-client-cert-auth \       --peer-trusted-ca-file ./certs/ca.pem \       --log-output stdoutEOFetcd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod +x etcd-server-startup.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>修改对应参数，证书秘钥记得拷贝</p><h6 id="安装supervisor进程守护服务："><a href="#安装supervisor进程守护服务：" class="headerlink" title="安装supervisor进程守护服务："></a>安装supervisor进程守护服务：</h6><pre class="line-numbers language-bash"><code class="language-bash">etcd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum -y install supervisor</span>etcd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable supervisord --now</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="编辑etcd-server启动配置："><a href="#编辑etcd-server启动配置：" class="headerlink" title="编辑etcd-server启动配置："></a>编辑etcd-server启动配置：</h6><pre><code>etcd]# cat &gt; /etc/supervisord.d/etcd-server.ini &lt;&lt; EOF[program:etcd-server]command=/opt/etcd/etcd-server-startup.sh                        ; the program (relative uses PATH, can take args)numprocs=1                                                      ; number of processes copies to start (def 1)directory=/opt/etcd                                             ; directory to cwd to before exec (def no cwd)autostart=true                                                  ; start at supervisord start (default: true)autorestart=true                                                ; retstart at unexpected quit (default: true)startsecs=30                                                    ; number of secs prog must stay running (def. 1)startretries=3                                                  ; max # of serial start failures (default 3)exitcodes=0,2                                                   ; 'expected' exit codes for process (default 0,2)stopsignal=QUIT                                                 ; signal used to kill process (default TERM)stopwaitsecs=10                                                 ; max num secs to wait b4 SIGKILL (default 10)user=etcd                                                       ; setuid to this UNIX account to run the programredirect_stderr=true                                            ; redirect proc stderr to stdout (default false)killasgroup=true                                                ; kill all process in a groupstopasgroup=true                                                ; stop all process in a groupstdout_logfile=/data/logs/etcd-server/etcd.stdout.log           ; stdout log path, NONE for none; default AUTOstdout_logfile_maxbytes=64MB                                    ; max # logfile bytes b4 rotation (default 50MB)stdout_logfile_backups=4                                        ; # of stdout logfile backups (default 10)stdout_capture_maxbytes=1MB                                     ; number of bytes in 'capturemode' (default 0)stdout_events_enabled=false                                     ; emit events on stdout writes (default false)EOF</code></pre><h6 id="启动etcd-server服务："><a href="#启动etcd-server服务：" class="headerlink" title="启动etcd-server服务："></a>启动etcd-server服务：</h6><pre class="line-numbers language-bash"><code class="language-bash">etcd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># supervisorctl update</span><span class="token comment" spellcheck="true"># 检查服务状态</span>etcd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># supervisorctl status</span>etcd-server                      RUNNING   pid 9587, <span class="token function">uptime</span> 0:01:03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013144415527.png" alt="image-20211013144415527"></p><h6 id="检查etcd集群状态："><a href="#检查etcd集群状态：" class="headerlink" title="检查etcd集群状态："></a>检查etcd集群状态：</h6><pre class="line-numbers language-bash"><code class="language-bash">etcd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./etcdctl member list</span>etcd<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./etcdctl cluster-health</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013150240168.png" alt="image-20211013150240168"></p><h5 id="2-安装apiserver组件"><a href="#2-安装apiserver组件" class="headerlink" title="2. 安装apiserver组件"></a>2. 安装apiserver组件</h5><h6 id="集群规划：-2"><a href="#集群规划：-2" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>kube-apiserver</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>kube-apiserver</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>kube-apiserver</td></tr></tbody></table><h6 id="下载软件，解压，做软链："><a href="#下载软件，解压，做软链：" class="headerlink" title="下载软件，解压，做软链："></a>下载软件，解压，做软链：</h6><p><a href="https://github.com/kubernetes/kubernetes">kubernetes 下载链接</a></p><pre class="line-numbers language-bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /opt/src</span>src<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget https://dl.k8s.io/v1.17.16/kubernetes-server-linux-amd64.tar.gz</span>src<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar -xf kubernetes-server-linux-amd64-v1.17.16.tar.gz -C /opt/</span>src<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /opt/</span>opt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mv kubernetes kubernetes-v1.17.16</span>opt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s /opt/kubernetes-v1.17.16 /opt/kubernetes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013155027768.png" alt="image-20211013155027768"></p><h6 id="整理kubernetes软件包："><a href="#整理kubernetes软件包：" class="headerlink" title="整理kubernetes软件包："></a>整理kubernetes软件包：</h6><pre class="line-numbers language-bash"><code class="language-bash">opt<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd kubernetes</span>kubernetes<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -f kubernetes-src.tar.gz</span>kubernetes<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd server/bin/</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -f *_tag</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -f *.tar</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013160222000.png" alt="image-20211013160222000"></p><h6 id="创建目录，拷贝证书、私钥：-1"><a href="#创建目录，拷贝证书、私钥：-1" class="headerlink" title="创建目录，拷贝证书、私钥："></a>创建目录，拷贝证书、私钥：</h6><pre class="line-numbers language-bash"><code class="language-bash">bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /data/logs/kubernetes/kube-apiserver ./certs ./conf</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># scp -p /opt/certs/apiserver-key.pem /opt/certs/apiserver.pem /opt/certs/ca.pem /opt/certs/ca-key.pem  /opt/certs/client-key.pem  /opt/certs/client.pem /opt/certs/metrics-proxy-key.pem /opt/certs/metrics-proxy.pem 192.168.92.155:/opt/kubernetes/server/bin/certs/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013162023543.png" alt="image-20211013162023543"></p><h6 id="编辑配置文件："><a href="#编辑配置文件：" class="headerlink" title="编辑配置文件："></a>编辑配置文件：</h6><pre class="line-numbers language-yaml"><code class="language-yaml">bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat > conf/audit.yaml &lt;&lt; EOF</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> audit.k8s.io/v1beta1 <span class="token comment" spellcheck="true"># This is required.</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Policy<span class="token comment" spellcheck="true"># Don't generate audit events for all requests in RequestReceived stage.</span><span class="token key atrule">omitStages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">"RequestReceived"</span><span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Log pod changes at RequestResponse level</span>  <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> RequestResponse    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token comment" spellcheck="true"># Resource "pods" doesn't match requests to any subresource of pods,</span>      <span class="token comment" spellcheck="true"># which is consistent with the RBAC policy.</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"pods"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># Log "pods/log", "pods/status" at Metadata level</span>  <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> Metadata    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"pods/log"</span><span class="token punctuation">,</span> <span class="token string">"pods/status"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># Don't log requests to a configmap called "controller-leader"</span>  <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> None    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"configmaps"</span><span class="token punctuation">]</span>      <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"controller-leader"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># Don't log watch requests by the "system:kube-proxy" on endpoints or services</span>  <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> None    <span class="token key atrule">users</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"system:kube-proxy"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"watch"</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment" spellcheck="true"># core API group</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"endpoints"</span><span class="token punctuation">,</span> <span class="token string">"services"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># Don't log authenticated requests to certain non-resource URL paths.</span>  <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> None    <span class="token key atrule">userGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"system:authenticated"</span><span class="token punctuation">]</span>    <span class="token key atrule">nonResourceURLs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"/api*"</span> <span class="token comment" spellcheck="true"># Wildcard matching.</span>    <span class="token punctuation">-</span> <span class="token string">"/version"</span>  <span class="token comment" spellcheck="true"># Log the request body of configmap changes in kube-system.</span>  <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> Request    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment" spellcheck="true"># core API group</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"configmaps"</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># This rule only applies to resources in the "kube-system" namespace.</span>    <span class="token comment" spellcheck="true"># The empty string "" can be used to select non-namespaced resources.</span>    <span class="token key atrule">namespaces</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"kube-system"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># Log configmap and secret changes in all other namespaces at the Metadata level.</span>  <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> Metadata    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment" spellcheck="true"># core API group</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"secrets"</span><span class="token punctuation">,</span> <span class="token string">"configmaps"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># Log all other resources in core and extensions at the Request level.</span>  <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> Request    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment" spellcheck="true"># core API group</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">"extensions"</span> <span class="token comment" spellcheck="true"># Version of group should NOT be included.</span>  <span class="token comment" spellcheck="true"># A catch-all rule to log all other requests at the Metadata level.</span>  <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> Metadata    <span class="token comment" spellcheck="true"># Long-running requests like watches that fall under this rule will not</span>    <span class="token comment" spellcheck="true"># generate an audit event in RequestReceived.</span>    <span class="token key atrule">omitStages</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"RequestReceived"</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="编辑启动脚本："><a href="#编辑启动脚本：" class="headerlink" title="编辑启动脚本："></a>编辑启动脚本：</h6><pre class="line-numbers language-shell"><code class="language-shell">bin]# cat > kube-apiserver.sh << EOF#!/bin/bash./kube-apiserver \  --apiserver-count 2 \  --audit-log-path /data/logs/kubernetes/kube-apiserver/audit-log \  --audit-policy-file ./conf/audit.yaml \  --authorization-mode RBAC \  --client-ca-file ./certs/ca.pem \  --requestheader-client-ca-file ./certs/ca.pem \  --enable-admission-plugins NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota \  --etcd-cafile ./certs/ca.pem \  --etcd-certfile ./certs/client.pem \  --etcd-keyfile ./certs/client-key.pem \  --etcd-servers https://192.168.92.155:2379,https://192.168.92.156:2379,https://192.168.92.157:2379 \  --service-account-key-file ./certs/ca-key.pem \  --service-cluster-ip-range 10.96.0.0/22 \  --service-node-port-range 3000-29999 \  --target-ram-mb=1024 \  --kubelet-client-certificate ./certs/client.pem \  --kubelet-client-key ./certs/client-key.pem \  --log-dir  /data/logs/kubernetes/kube-apiserver \  --tls-cert-file ./certs/apiserver.pem \  --tls-private-key-file ./certs/apiserver-key.pem \  --proxy-client-cert-file ./certs/metrics-proxy.pem \  --proxy-client-key-file ./certs/metrics-proxy-key.pem \  --requestheader-client-ca-file ./certs/ca.pem \  --requestheader-allowed-names= \  --requestheader-extra-headers-prefix=X-Remote-Extra- \  --requestheader-group-headers=X-Remote-Group \  --requestheader-username-headers=X-Remote-User \  --v 2EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="编辑kube-apiserver启动配置："><a href="#编辑kube-apiserver启动配置：" class="headerlink" title="编辑kube-apiserver启动配置："></a>编辑kube-apiserver启动配置：</h6><pre><code>bin]# cat &gt; /etc/supervisord.d/kube-apiserver.ini &lt;&lt; EOF[program:kube-apiserver]command=/opt/kubernetes/server/bin/kube-apiserver.shnumprocs=1directory=/opt/kubernetes/server/binautostart=trueautorestart=truestartsecs=30startretries=3exitcodes=0,2stopsignal=QUITstopwaitsecs=10user=rootredirect_stderr=truekillasgroup=truestopasgroup=truestdout_logfile=/data/logs/kubernetes/kube-apiserver/apiserver.stdout.logstdout_logfile_maxbytes=64MBstdout_logfile_backups=4stdout_capture_maxbytes=1MBstdout_events_enabled=falseEOF</code></pre><h6 id="启动kube-apiserver并检查："><a href="#启动kube-apiserver并检查：" class="headerlink" title="启动kube-apiserver并检查："></a>启动kube-apiserver并检查：</h6><pre class="line-numbers language-bash"><code class="language-bash">bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># supervisorctl update</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># supervisorctl status</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ss -nutlp | egrep "8080|6443"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013163102110.png" alt="image-20211013163102110"></p><p><strong>注意：</strong>其他节点修改对应参数并启动</p><h5 id="3-配置nginx四层反向代理"><a href="#3-配置nginx四层反向代理" class="headerlink" title="3. 配置nginx四层反向代理"></a>3. 配置nginx四层反向代理</h5><h6 id="集群规划：-3"><a href="#集群规划：-3" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>版本</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>1.20.1</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>1.20.1</td></tr></tbody></table><h6 id="软件安装："><a href="#软件安装：" class="headerlink" title="软件安装："></a>软件安装：</h6><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum -y install nginx nginx-mod-stream</span>k8s-master4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable nginx --now</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="编辑配置文件-x2F-etc-x2F-nginx-x2F-nginx-conf："><a href="#编辑配置文件-x2F-etc-x2F-nginx-x2F-nginx-conf：" class="headerlink" title="编辑配置文件/etc/nginx/nginx.conf："></a>编辑配置文件/etc/nginx/nginx.conf：</h6><p>新增以下配置</p><pre><code>stream {    upstream kube-apiserver {        server 192.168.92.155:6443     max_fails=3 fail_timeout=30s;        server 192.168.92.156:6443     max_fails=3 fail_timeout=30s;        server 192.168.92.157:6443     max_fails=3 fail_timeout=30s;    }    server {        listen 7443;        proxy_connect_timeout 2s;        proxy_timeout 900s;        proxy_pass kube-apiserver;    }}</code></pre><p><strong>注意：</strong><code>stream</code>模块与<code>http</code>模块同级，所以<code>stream</code>模块配置不能编写入<code>http</code>模块中。</p><h6 id="启动并设置开机自启-1"><a href="#启动并设置开机自启-1" class="headerlink" title="启动并设置开机自启"></a>启动并设置开机自启</h6><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl enable nginx --now</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong>这里以k8s-master4主机为例，另一台k8s-node4-1需要相同操作</p><h5 id="4-安装keepalived负载均衡"><a href="#4-安装keepalived负载均衡" class="headerlink" title="4. 安装keepalived负载均衡"></a>4. 安装keepalived负载均衡</h5><h6 id="集群规划：-4"><a href="#集群规划：-4" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机名</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>master</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>backup</td></tr></tbody></table><p>VIP：192.168.92.154</p><h6 id="安装keepalived服务："><a href="#安装keepalived服务：" class="headerlink" title="安装keepalived服务："></a>安装keepalived服务：</h6><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install keepalived -y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="编辑检查脚本："><a href="#编辑检查脚本：" class="headerlink" title="编辑检查脚本："></a>编辑检查脚本：</h6><pre class="line-numbers language-shell"><code class="language-shell">k8s-master4 ~]# cat > /etc/keepalived/check_port.sh << "EOF"#!/bin/bashCHK_PORT=$1if [ -n "$CHK_PORT" ];then        PORT_PROCESS=`netstat -nutlp|grep $CHK_PORT|wc -l`        if [ $PORT_PROCESS -eq 0 ];then                echo "Port $CHK_PORT Is Not Used,End."                exit 1        fielse        echo "Check Port Cant Be Empty!"fiEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="添加执行权限并测试脚本："><a href="#添加执行权限并测试脚本：" class="headerlink" title="添加执行权限并测试脚本："></a>添加执行权限并测试脚本：</h6><pre class="line-numbers language-shell"><code class="language-shell">k8s-master4 ~]# chmod +x /etc/keepalived/check_port.shk8s-master4 ~]# /etc/keepalived/check_port.shk8s-master4 ~]# /etc/keepalived/check_port.sh 25452k8s-master4 ~]# /etc/keepalived/check_port.sh 8080k8s-master4 ~]# /etc/keepalived/check_port.sh 7443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013174227949.png" alt="image-20211013174227949"></p><p>**PS:**无输出证明端口存活</p><h6 id="编辑keepalived配置文件："><a href="#编辑keepalived配置文件：" class="headerlink" title="编辑keepalived配置文件："></a>编辑keepalived配置文件：</h6><p><strong>注意：</strong>这里两台服务器keepalived配置略有不同，在下面分别贴出</p><pre><code># k8s-master4主机keepalived配置如下：k8s-master4 ~]# cat &gt; /etc/keepalived/keepalived.conf &lt;&lt; EOFglobal_defs {   router_id 192.168.92.155}vrrp_script chk_nginx {    script "/etc/keepalived/check_port.sh 7443"    interval 2    weight -20}vrrp_instance VI_1 {    state MASTER    interface ens32    virtual_router_id 251    priority 100    advert_int 1    mcast_src_ip 192.168.92.155    nopreempt    authentication {        auth_type PASS        auth_pass 12345678    }    track_script {         chk_nginx    }    virtual_ipaddress {        192.168.92.154    }}EOF# k8s-node4-1主机keepalived配置如下：k8s-node4-1 ~]# cat &gt; /etc/keepalived/keepalived.conf &lt;&lt; EOFglobal_defs {    router_id 192.168.92.156}vrrp_script chk_nginx {    script "/etc/keepalived/check_port.sh 7443"    interval 2    weight -20}vrrp_instance VI_1 {    state BACKUP    interface ens32    virtual_router_id 251    mcast_src_ip 192.168.92.156    priority 90    advert_int 1    authentication {        auth_type PASS        auth_pass 12345678    }    track_script {        chk_nginx    }    virtual_ipaddress {        192.168.92.154    }}EOF</code></pre><h6 id="启动keepalived服务："><a href="#启动keepalived服务：" class="headerlink" title="启动keepalived服务："></a>启动keepalived服务：</h6><pre><code>k8s-master4 ~]# systemctl enable keepalived --now</code></pre><h6 id="检查keepalived服务："><a href="#检查keepalived服务：" class="headerlink" title="检查keepalived服务："></a>检查keepalived服务：<img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013184735757.png" alt="image-20211013184735757"></h6><h5 id="5-安装kube-controller-manager组件"><a href="#5-安装kube-controller-manager组件" class="headerlink" title="5. 安装kube-controller-manager组件"></a>5. 安装kube-controller-manager组件</h5><h6 id="集群规划：-5"><a href="#集群规划：-5" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>kube-controller-manager</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>kube-controller-manager</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>kube-controller-manager</td></tr></tbody></table><h6 id="编辑启动脚本：-1"><a href="#编辑启动脚本：-1" class="headerlink" title="编辑启动脚本："></a>编辑启动脚本：</h6><pre class="line-numbers language-shell"><code class="language-shell">~]# cd /opt/kubernetes/server/bin/k8s-master4 bin]# cat > kube-controller-manager.sh << EOF#!/bin/sh./kube-controller-manager \  --cluster-cidr 172.92.0.0/16 \  --leader-elect true \  --log-dir /data/logs/kubernetes/kube-controller-manager \  --master http://127.0.0.1:8080 \  --service-account-private-key-file ./certs/ca-key.pem \  --service-cluster-ip-range 10.96.0.0/22 \  --root-ca-file ./certs/ca.pem \  --v 2EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="编辑supervisor配置文件："><a href="#编辑supervisor配置文件：" class="headerlink" title="编辑supervisor配置文件："></a>编辑supervisor配置文件：</h6><pre class="line-numbers language-ini"><code class="language-ini">bin]# cat > /etc/supervisord.d/kube-controller-manager.ini &lt;&lt; EOF<span class="token selector">[program:kube-controller-manager]</span><span class="token constant">command</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/kubernetes/server/bin/kube-controller-manager.sh</span><span class="token constant">numprocs</span><span class="token attr-value"><span class="token punctuation">=</span>1</span><span class="token constant">directory</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/kubernetes/server/bin</span><span class="token constant">autostart</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">autorestart</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">startsecs</span><span class="token attr-value"><span class="token punctuation">=</span>30</span><span class="token constant">startretries</span><span class="token attr-value"><span class="token punctuation">=</span>3</span><span class="token constant">exitcodes</span><span class="token attr-value"><span class="token punctuation">=</span>0,2</span><span class="token constant">stopsignal</span><span class="token attr-value"><span class="token punctuation">=</span>QUIT</span><span class="token constant">stopwaitsecs</span><span class="token attr-value"><span class="token punctuation">=</span>10</span><span class="token constant">user</span><span class="token attr-value"><span class="token punctuation">=</span>root</span><span class="token constant">redirect_stderr</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">killasgroup</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">stopasgroup</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">stdout_logfile</span><span class="token attr-value"><span class="token punctuation">=</span>/data/logs/kubernetes/kube-controller-manager/controller.stdout.log</span><span class="token constant">stdout_logfile_maxbytes</span><span class="token attr-value"><span class="token punctuation">=</span>64MB</span><span class="token constant">stdout_logfile_backups</span><span class="token attr-value"><span class="token punctuation">=</span>4</span><span class="token constant">stdout_capture_maxbytes</span><span class="token attr-value"><span class="token punctuation">=</span>1MB</span><span class="token constant">stdout_events_enabled</span><span class="token attr-value"><span class="token punctuation">=</span>false</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="创建目录与添加执行权限："><a href="#创建目录与添加执行权限：" class="headerlink" title="创建目录与添加执行权限："></a>创建目录与添加执行权限：</h6><pre class="line-numbers language-bash"><code class="language-bash">bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /data/logs/kubernetes/kube-controller-manager</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod +x ./kube-controller-manager.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="启动与检查："><a href="#启动与检查：" class="headerlink" title="启动与检查："></a>启动与检查：</h6><pre class="line-numbers language-bash"><code class="language-bash">bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># supervisorctl update</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># supervisorctl status</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014075502807.png" alt="image-20211014075502807"></p><h5 id="6-安装kube-scheduler组件"><a href="#6-安装kube-scheduler组件" class="headerlink" title="6. 安装kube-scheduler组件"></a>6. 安装kube-scheduler组件</h5><h6 id="集群规划：-6"><a href="#集群规划：-6" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>kube-scheduler</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>kube-scheduler</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>kube-scheduler</td></tr></tbody></table><h6 id="编辑启动脚本：-2"><a href="#编辑启动脚本：-2" class="headerlink" title="编辑启动脚本："></a>编辑启动脚本：</h6><pre class="line-numbers language-shell"><code class="language-shell">bin]# cat > kube-scheduler.sh << EOF#!/bin/sh./kube-scheduler \  --leader-elect  \  --log-dir /data/logs/kubernetes/kube-scheduler \  --master http://127.0.0.1:8080 \  --v 2EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="编辑supervisor管理配置："><a href="#编辑supervisor管理配置：" class="headerlink" title="编辑supervisor管理配置："></a>编辑supervisor管理配置：</h6><pre class="line-numbers language-ini"><code class="language-ini">bin]# cat > /etc/supervisord.d/kube-scheduler.ini &lt;&lt; EOF<span class="token selector">[program:kube-scheduler]</span><span class="token constant">command</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/kubernetes/server/bin/kube-scheduler.sh</span><span class="token constant">numprocs</span><span class="token attr-value"><span class="token punctuation">=</span>1</span><span class="token constant">directory</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/kubernetes/server/bin</span><span class="token constant">autostart</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">autorestart</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">startsecs</span><span class="token attr-value"><span class="token punctuation">=</span>30</span><span class="token constant">startretries</span><span class="token attr-value"><span class="token punctuation">=</span>3</span><span class="token constant">exitcodes</span><span class="token attr-value"><span class="token punctuation">=</span>0,2</span><span class="token constant">stopsignal</span><span class="token attr-value"><span class="token punctuation">=</span>QUIT</span><span class="token constant">stopwaitsecs</span><span class="token attr-value"><span class="token punctuation">=</span>10</span><span class="token constant">user</span><span class="token attr-value"><span class="token punctuation">=</span>root</span><span class="token constant">redirect_stderr</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">killasgroup</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">stopasgroup</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">stdout_logfile</span><span class="token attr-value"><span class="token punctuation">=</span>/data/logs/kubernetes/kube-scheduler/scheduler.stdout.log</span><span class="token constant">stdout_logfile_maxbytes</span><span class="token attr-value"><span class="token punctuation">=</span>64MB</span><span class="token constant">stdout_logfile_backups</span><span class="token attr-value"><span class="token punctuation">=</span>4</span><span class="token constant">stdout_capture_maxbytes</span><span class="token attr-value"><span class="token punctuation">=</span>1MB</span><span class="token constant">stdout_events_enabled</span><span class="token attr-value"><span class="token punctuation">=</span>false</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="创建目录与添加执行权限：-1"><a href="#创建目录与添加执行权限：-1" class="headerlink" title="创建目录与添加执行权限："></a>创建目录与添加执行权限：</h6><pre class="line-numbers language-shell"><code class="language-shell">bin]# mkdir -p /data/logs/kubernetes/kube-schedulerbin]# chmod +x ./kube-scheduler.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="启动与检查：-1"><a href="#启动与检查：-1" class="headerlink" title="启动与检查："></a>启动与检查：</h6><pre class="line-numbers language-bash"><code class="language-bash">bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># supervisorctl update</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># supervisorctl status</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014080834445.png" alt="image-20211014080834445"></p><h5 id="7-主控节点环境检查"><a href="#7-主控节点环境检查" class="headerlink" title="7. 主控节点环境检查"></a>7. 主控节点环境检查</h5><h6 id="环境检查："><a href="#环境检查：" class="headerlink" title="环境检查："></a>环境检查：</h6><pre class="line-numbers language-bash"><code class="language-bash">k8s-master4 bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install bash-completion -y</span>k8s-master4 bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl completion bash > /etc/bash_completion.d/kubelet</span>k8s-master4 bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kubectl get cs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014081827976.png" alt="image-20211014081827976"></p><p>如图：各组件状态Healthy则为正常，下面安装运算节点组件</p><h4 id="三、部署运算节点"><a href="#三、部署运算节点" class="headerlink" title="三、部署运算节点"></a>三、部署运算节点</h4><h5 id="1-安装kubelet组件"><a href="#1-安装kubelet组件" class="headerlink" title="1. 安装kubelet组件"></a>1. 安装kubelet组件</h5><h6 id="集群规划：-7"><a href="#集群规划：-7" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>kube-kubelet</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>kube-kubelet</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>kube-kubelet</td></tr></tbody></table><h6 id="配置用户context文件："><a href="#配置用户context文件：" class="headerlink" title="配置用户context文件："></a>配置用户context文件：</h6><pre class="line-numbers language-shell"><code class="language-shell">k8s-master4 conf]# kubectl config set-cluster myk8s \  --certificate-authority=../certs/ca.pem \  --embed-certs=true \  --server=https://192.168.92.154:7443 \  --kubeconfig=kubelet.kubeconfigk8s-master4 conf]# kubectl config set-credentials k8s-node \  --client-certificate=../certs/client.pem \  --client-key=../certs/client-key.pem \  --embed-certs=true \  --kubeconfig=kubelet.kubeconfigk8s-master4 conf]# kubectl config set-context myk8s-context \  --cluster=myk8s \  --user=k8s-node \  --kubeconfig=kubelet.kubeconfigk8s-master4 conf]# kubectl config use-context myk8s-context --kubeconfig=kubelet.kubeconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="编辑RBAC权限文件："><a href="#编辑RBAC权限文件：" class="headerlink" title="编辑RBAC权限文件："></a>编辑RBAC权限文件：</h6><pre class="line-numbers language-yaml"><code class="language-yaml">k8s<span class="token punctuation">-</span>master4 conf<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat > k8s-node.yaml &lt;&lt; EOF</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> k8s<span class="token punctuation">-</span>node<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> cluster<span class="token punctuation">-</span>admin<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io  <span class="token key atrule">kind</span><span class="token punctuation">:</span> User  <span class="token key atrule">name</span><span class="token punctuation">:</span> k8s<span class="token punctuation">-</span>nodeEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="执行RBAC文件："><a href="#执行RBAC文件：" class="headerlink" title="执行RBAC文件："></a>执行RBAC文件：</h6><pre class="line-numbers language-shell"><code class="language-shell">k8s-master4 conf]# kubectl create -f k8s-node.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211015100027389.png" alt="image-20211015100027389"></p><p><strong>注意：</strong>这里绑定的<code>ClusterRole</code>是<code>cluster-admin</code>权限为最高建议</p><h6 id="上传文件与证书、秘钥到其他节点："><a href="#上传文件与证书、秘钥到其他节点：" class="headerlink" title="上传文件与证书、秘钥到其他节点："></a>上传文件与证书、秘钥到其他节点：</h6><pre class="line-numbers language-shell"><code class="language-shell">k8s-master4 conf]# scp -p kubelet.kubeconfig k8s-node.yaml 192.168.92.156:/opt/kubernetes/server/bin/conf/k8s-master4 conf]# scp -p kubelet.kubeconfig k8s-node.yaml 192.168.92.157:/opt/kubernetes/server/bin/conf/k8s-master4 bin]# cp -p /opt/certs/kubelet.pem /opt/certs/kubelet-key.pem ../certs/k8s-master4 bin]# scp -p /opt/certs/kubelet.pem /opt/certs/kubelet-key.pem 192.168.92.156:/opt/kubernetes/server/bin/certs/k8s-master4 bin]# scp -p /opt/certs/kubelet.pem /opt/certs/kubelet-key.pem 192.168.92.157:/opt/kubernetes/server/bin/certs/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="编辑启动脚本与配置："><a href="#编辑启动脚本与配置：" class="headerlink" title="编辑启动脚本与配置："></a>编辑启动脚本与配置：</h6><pre><code># kubelet配置文件kubelet.yamlconf]# cat &gt; kubelet.yaml &lt;&lt; EOFapiVersion: kubelet.config.k8s.io/v1beta1kind: KubeletConfigurationcgroupDriver: systemdclusterDNS:- 10.96.0.2clusterDomain: cluster.localEOF# kubelet启动脚本kubelet.shconf]# cat &gt; ../kubelet.sh &lt;&lt; EOF#!/bin/sh./kubelet \  --anonymous-auth=false \  --bootstrap-kubeconfig=./conf/bootstrap-kubelet.conf \  --kubeconfig=./conf/kubelet.kubeconfig \  --config=./conf/kubelet.yaml \  --fail-swap-on="false" \  --client-ca-file ./certs/ca.pem \  --tls-cert-file ./certs/kubelet.pem \  --tls-private-key-file ./certs/kubelet-key.pem \  --container-runtime=remote \  --container-runtime-endpoint=/run/containerd/containerd.sock \  --pod-infra-container-image=docker.io/kubernetes/pause:latest \  --hostname-override k8s-master4 \  --image-gc-high-threshold 20 \  --image-gc-low-threshold 10 \  --log-dir /data/logs/kubernetes/kube-kubelet \  --root-dir /data/kubeletEOF</code></pre><h6 id="编辑supervisor管理配置：-1"><a href="#编辑supervisor管理配置：-1" class="headerlink" title="编辑supervisor管理配置："></a>编辑supervisor管理配置：</h6><pre class="line-numbers language-ini"><code class="language-ini">bin]# cat > /etc/supervisord.d/kube-kubelet.ini &lt;&lt; EOF<span class="token selector">[program:kube-kubelet]</span><span class="token constant">command</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/kubernetes/server/bin/kubelet.sh     ; the program (relative uses PATH, can take args)</span><span class="token constant">numprocs</span><span class="token attr-value"><span class="token punctuation">=</span>1                                        ; number of processes copies to start (def 1)</span><span class="token constant">directory</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/kubernetes/server/bin              ; directory to cwd to before exec (def no cwd)</span><span class="token constant">autostart</span><span class="token attr-value"><span class="token punctuation">=</span>true                                    ; start at supervisord start (default: true)</span><span class="token constant">autorestart</span><span class="token attr-value"><span class="token punctuation">=</span>true                                ; retstart at unexpected quit (default: true)</span><span class="token constant">startsecs</span><span class="token attr-value"><span class="token punctuation">=</span>30                                      ; number of secs prog must stay running (def. 1)</span><span class="token constant">startretries</span><span class="token attr-value"><span class="token punctuation">=</span>3                                    ; max # of serial start failures (default 3)</span><span class="token constant">exitcodes</span><span class="token attr-value"><span class="token punctuation">=</span>0,2                                     ; 'expected' exit codes for process (default 0,2)</span><span class="token constant">stopsignal</span><span class="token attr-value"><span class="token punctuation">=</span>QUIT                                   ; signal used to kill process (default TERM)</span><span class="token constant">stopwaitsecs</span><span class="token attr-value"><span class="token punctuation">=</span>10                                   ; max num secs to wait b4 SIGKILL (default 10)</span><span class="token constant">user</span><span class="token attr-value"><span class="token punctuation">=</span>root                                         ; setuid to this UNIX account to run the program</span><span class="token constant">redirect_stderr</span><span class="token attr-value"><span class="token punctuation">=</span>true                              ; redirect proc stderr to stdout (default false)</span><span class="token constant">killasgroup</span><span class="token attr-value"><span class="token punctuation">=</span>true                                  ; kill all process in a group</span><span class="token constant">stopasgroup</span><span class="token attr-value"><span class="token punctuation">=</span>true                                  ; stop all process in a group</span><span class="token constant">stdout_logfile</span><span class="token attr-value"><span class="token punctuation">=</span>/data/logs/kubernetes/kube-kubelet/kubelet.stdout.log   ; stderr log path, NONE for none; default AUTO</span><span class="token constant">stdout_logfile_maxbytes</span><span class="token attr-value"><span class="token punctuation">=</span>64MB                      ; max # logfile bytes b4 rotation (default 50MB)</span><span class="token constant">stdout_logfile_backups</span><span class="token attr-value"><span class="token punctuation">=</span>4                          ; # of stdout logfile backups (default 10)</span><span class="token constant">stdout_capture_maxbytes</span><span class="token attr-value"><span class="token punctuation">=</span>1MB                       ; number of bytes in 'capturemode' (default 0)</span><span class="token constant">stdout_events_enabled</span><span class="token attr-value"><span class="token punctuation">=</span>false                       ; emit events on stdout writes (default false)</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="创建目录添加执行权限："><a href="#创建目录添加执行权限：" class="headerlink" title="创建目录添加执行权限："></a>创建目录添加执行权限：</h6><pre class="line-numbers language-shell"><code class="language-shell">bin]# chmod +x ../kubelet.shbin]# mkdir -p /data/logs/kubernetes/kube-kubelet /data/kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="启动并检查："><a href="#启动并检查：" class="headerlink" title="启动并检查："></a>启动并检查：</h6><pre class="line-numbers language-shell"><code class="language-shell">bin]# supervisorctl updatebin]# supervisorctl statusbin]# tail -fn20 /data/logs/kubernetes/kube-kubelet/kubelet.stdout.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014095028549.png" alt="image-20211014095028549"></p><p>因没开启健康检查参数与指定端点，日志中有健康检查错误可以忽略。</p><pre><code>bin]# kubectl get nodes -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014095503004.png" alt="image-20211014095503004"></p><h5 id="2-安装kube-proxy组件"><a href="#2-安装kube-proxy组件" class="headerlink" title="2. 安装kube-proxy组件"></a>2. 安装kube-proxy组件</h5><h6 id="集群规划：-8"><a href="#集群规划：-8" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>kube-proxy</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>kube-proxy</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>kube-proxy</td></tr></tbody></table><h6 id="软件包安装与模块检查："><a href="#软件包安装与模块检查：" class="headerlink" title="软件包安装与模块检查："></a>软件包安装与模块检查：</h6><pre class="line-numbers language-bash"><code class="language-bash">~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /opt/kubernetes/server/bin/</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum -y install ipset ipvsadm</span>bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lsmod | grep ip_vs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014101045857.png" alt="image-20211014101045857"></p><h6 id="创建目录与拷贝证书、秘钥："><a href="#创建目录与拷贝证书、秘钥：" class="headerlink" title="创建目录与拷贝证书、秘钥："></a>创建目录与拷贝证书、秘钥：</h6><pre class="line-numbers language-bash"><code class="language-bash">bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p /data/logs/kubernetes/kube-proxy</span>k8s-master4 bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cp -p /opt/certs/kube-proxy-client-key.pem /opt/certs/kube-proxy-client.pem ./certs/</span>k8s-master4 bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># scp -p /opt/certs/kube-proxy-client-key.pem /opt/certs/kube-proxy-client.pem 192.168.92.157:/opt/kubernetes/server/bin/certs/</span>k8s-master4 bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># scp -p /opt/certs/kube-proxy-client-key.pem /opt/certs/kube-proxy-client.pem 192.168.92.157:/opt/kubernetes/server/bin/certs/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="创建资源文件并拷贝至其他节点："><a href="#创建资源文件并拷贝至其他节点：" class="headerlink" title="创建资源文件并拷贝至其他节点："></a>创建资源文件并拷贝至其他节点：</h6><pre><code>k8s-master4 bin]# cd /opt/kubernetes/server/bin/conf/k8s-master4 conf]# kubectl config set-cluster myk8s \  --certificate-authority=../certs/ca.pem \  --embed-certs=true \  --server=https://192.168.92.154:7443 \  --kubeconfig=kube-proxy.kubeconfigk8s-master4 conf]# kubectl config set-credentials kube-proxy \  --client-certificate=../certs/kube-proxy-client.pem \  --client-key=../certs/kube-proxy-client-key.pem \  --embed-certs=true \  --kubeconfig=kube-proxy.kubeconfigk8s-master4 conf]# kubectl config set-context myk8s-context \  --cluster=myk8s \  --user=kube-proxy \  --kubeconfig=kube-proxy.kubeconfig  k8s-master4 conf]# kubectl config use-context myk8s-context --kubeconfig=kube-proxy.kubeconfigk8s-master4 conf]# scp -p kube-proxy.kubeconfig 192.168.92.156:/opt/kubernetes/server/bin/conf/k8s-master4 conf]# scp -p kube-proxy.kubeconfig 192.168.92.157:/opt/kubernetes/server/bin/conf/</code></pre><h6 id="编辑启动脚本：-3"><a href="#编辑启动脚本：-3" class="headerlink" title="编辑启动脚本："></a>编辑启动脚本：</h6><pre class="line-numbers language-shell"><code class="language-shell">conf]# cat > ../kube-proxy.sh << EOF#!/bin/sh./kube-proxy \  --cluster-cidr 172.92.0.0/16 \  --hostname-override  k8s-master4 \  --proxy-mode=ipvs \  --ipvs-scheduler=nq \  --kubeconfig ./conf/kube-proxy.kubeconfigEOFconf]# chmod +x ../kube-proxy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="编辑supervisor管理配置：-2"><a href="#编辑supervisor管理配置：-2" class="headerlink" title="编辑supervisor管理配置："></a>编辑supervisor管理配置：</h6><pre class="line-numbers language-shell"><code class="language-shell">conf]# cat > /etc/supervisord.d/kube-proxy.ini << EOF[program:kube-proxy]command=/opt/kubernetes/server/bin/kube-proxy.shnumprocs=1directory=/opt/kubernetes/server/binautostart=trueautorestart=truestartsecs=30startretries=3exitcodes=0,2stopsignal=QUITstopwaitsecs=10user=rootredirect_stderr=truekillasgroup=truestopasgroup=truestdout_logfile=/data/logs/kubernetes/kube-proxy/proxy.stdout.logstdout_logfile_maxbytes=64MBstdout_logfile_backups=4stdout_capture_maxbytes=1MBstdout_events_enabled=falseEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="启动与检查：-2"><a href="#启动与检查：-2" class="headerlink" title="启动与检查："></a>启动与检查：</h6><pre class="line-numbers language-shell"><code class="language-shell">conf]# supervisorctl updateconf]# supervisorctl statusconf]# tail -fn20 /data/logs/kubernetes/kube-proxy/proxy.stdout.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014105908239.png" alt="image-20211014105908239"></p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014105949903.png" alt="image-20211014105949903"></p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014110016777.png" alt="image-20211014110016777"></p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014110047627.png" alt="image-20211014110047627"></p><pre><code># 编辑一个简单的nginx资源清单k8s-master4 nginx]# cat ds.yaml apiVersion: apps/v1kind: DaemonSetmetadata:  name: nginx-dsspec:  selector:    matchLabels:      app: nginx-ds  template:    metadata:      labels:        app: nginx-ds    spec:      containers:      - name: my-nginx        image: nginx:latest        ports:        - containerPort: 80# 引用ds.yaml资源清单k8s-master4 nginx]# kubectl apply -f ds.yaml# 查看nginx pod 状态k8s-master4 nginx]# kubectl get pods -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014121809579.png" alt="image-20211014121809579"></p><p>这时候可以看到各节点的pod创建是<code>Running</code>状态但是分配的IP相同，都是10.88.xx.xx网段。这是因为containerd自带的cni插件配置<code>/etc/cni/net.d/10-containerd-net.conflist</code>导致，我们可以来看下这个文件。</p><pre class="line-numbers language-json"><code class="language-json">~<span class="token punctuation">]</span># cat /etc/cni/net.d/<span class="token number">10</span>-containerd-net.conflist<span class="token punctuation">{</span>  <span class="token property">"cniVersion"</span><span class="token operator">:</span> <span class="token string">"0.4.0"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"containerd-net"</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"bridge"</span><span class="token punctuation">,</span>      <span class="token property">"bridge"</span><span class="token operator">:</span> <span class="token string">"cni0"</span><span class="token punctuation">,</span>      <span class="token property">"isGateway"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"ipMasq"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"promiscMode"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"ipam"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"host-local"</span><span class="token punctuation">,</span>        <span class="token property">"ranges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">[</span><span class="token punctuation">{</span>            <span class="token property">"subnet"</span><span class="token operator">:</span> <span class="token string">"10.88.0.0/16"</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span><span class="token punctuation">{</span>            <span class="token property">"subnet"</span><span class="token operator">:</span> <span class="token string">"2001:4860:4860::/64"</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"routes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> <span class="token property">"dst"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0/0"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> <span class="token property">"dst"</span><span class="token operator">:</span> "<span class="token operator">:</span><span class="token operator">:</span>/<span class="token number">0</span>" <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"portmap"</span><span class="token punctuation">,</span>      <span class="token property">"capabilities"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"portMappings"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>/etc/cni/net.d/10-containerd-net.conflist</code> 这个文件中已经定义了 <code>subnet</code> 网段恰好就是 <code>10.88.0.0/16</code> ，网桥名称为 <code>cni0</code> , 网络类型为 <code>bridge</code> 但是使用bridge 网络的容器无法跨多个宿主机进行通信，跨主机通信需要借助其他的 cni 插件，比如我们下面要安装的 Flannel，或者Calico 等等。</p><h4 id="四、部署网络插件"><a href="#四、部署网络插件" class="headerlink" title="四、部署网络插件"></a>四、部署网络插件</h4><h5 id="1-安装Flannel插件"><a href="#1-安装Flannel插件" class="headerlink" title="1. 安装Flannel插件"></a>1. 安装Flannel插件</h5><h6 id="节点规划："><a href="#节点规划：" class="headerlink" title="节点规划："></a>节点规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>flannel</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>flannel</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>flannel</td></tr></tbody></table><h6 id="下载软件包、解压、做软链接："><a href="#下载软件包、解压、做软链接：" class="headerlink" title="下载软件包、解压、做软链接："></a>下载软件包、解压、做软链接：</h6><p><a href="https://github.com/flannel-io/flannel/releases">flannel 下载链接</a></p><pre><code>~]# cd /opt/srcsrc]# wget https://github.com/flannel-io/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gzsrc]# mkdir /opt/flannel-v0.11.0src]# tar -xf flannel-v0.11.0-linux-amd64.tar.gz -C /opt/flannel-v0.11.0src]# ln -s /opt/flannel-v0.11.0 /opt/flannel</code></pre><h6 id="拷贝证书、秘钥："><a href="#拷贝证书、秘钥：" class="headerlink" title="拷贝证书、秘钥："></a>拷贝证书、秘钥：</h6><pre><code>src]# cd /opt/flannelk8s-master4 flannel]# mkdir certsk8s-master4 flannel]# cp -p /opt/certs/ca.pem /opt/certs/client.pem /opt/certs/client-key.pem  /opt/flannel/certs/# 拷贝至其他主机节点k8s-master4 flannel]# scp -rp /opt/flannel/certs 192.168.92.156:/opt/flannel/k8s-master4 flannel]# scp -rp /opt/flannel/certs 192.168.92.157:/opt/flannel/</code></pre><h6 id="编辑配置文件：-1"><a href="#编辑配置文件：-1" class="headerlink" title="编辑配置文件："></a>编辑配置文件：</h6><pre><code>flannel]# cat &gt; subnet.env &lt;&lt; EOFFLANNEL_NETWORK=172.92.0.0/16FLANNEL_SUBNET=172.92.155.1/24FLANNEL_MTU=1500FLANNEL_IPMASQ=falseEOF</code></pre><h6 id="编辑启动脚本：-4"><a href="#编辑启动脚本：-4" class="headerlink" title="编辑启动脚本："></a>编辑启动脚本：</h6><pre><code>flannel]# cat flanneld.sh #!/bin/sh./flanneld \  --public-ip=192.168.92.155 \  --etcd-endpoints=https://192.168.92.155:2379,https://192.168.92.156:2379,https://192.168.92.157:2379 \  --etcd-keyfile=./certs/client-key.pem \  --etcd-certfile=./certs/client.pem \  --etcd-cafile=./certs/ca.pem \  --iface=ens32 \  --subnet-file=./subnet.env \  --healthz-port=2401EOF# 给权限flannel]# chmod +x flanneld.sh</code></pre><h6 id="编辑supervisor管理配置：-3"><a href="#编辑supervisor管理配置：-3" class="headerlink" title="编辑supervisor管理配置："></a>编辑supervisor管理配置：</h6><pre><code>flannel]# cat &gt; /etc/supervisord.d/flannel.ini &lt;&lt; EOF[program:flanneld]command=/opt/flannel/flanneld.sh                             ; the program (relative uses PATH, can take args)numprocs=1                                                   ; number of processes copies to start (def 1)directory=/opt/flannel                                       ; directory to cwd to before exec (def no cwd)autostart=true                                               ; start at supervisord start (default: true)autorestart=true                                             ; retstart at unexpected quit (default: true)startsecs=30                                                 ; number of secs prog must stay running (def. 1)startretries=3                                               ; max # of serial start failures (default 3)exitcodes=0,2                                                ; 'expected' exit codes for process (default 0,2)stopsignal=QUIT                                              ; signal used to kill process (default TERM)stopwaitsecs=10                                              ; max num secs to wait b4 SIGKILL (default 10)user=root                                                    ; setuid to this UNIX account to run the programredirect_stderr=true                                         ; redirect proc stderr to stdout (default false)killasgroup=true                                             ; kill all process in a groupstopasgroup=true                                             ; stop all process in a groupstdout_logfile=/data/logs/flanneld/flanneld.stdout.log       ; stderr log path, NONE for none; default AUTOstdout_logfile_maxbytes=64MB                                 ; max # logfile bytes b4 rotation (default 50MB)stdout_logfile_backups=4                                     ; # of stdout logfile backups (default 10)stdout_capture_maxbytes=1MB                                  ; number of bytes in 'capturemode' (default 0)stdout_events_enabled=false                                  ; emit events on stdout writes (default false)EOF# 创建目录flannel]# mkdir -p /data/logs/flanneld</code></pre><h6 id="修改CNI配置："><a href="#修改CNI配置：" class="headerlink" title="修改CNI配置："></a>修改CNI配置：</h6><p>修改后如下：</p><pre><code>flannel]# cat /etc/cni/net.d/10-containerd-net.conflist {  "cniVersion": "0.4.0",  "name": "containerd-net",  "plugins": [    {      "type": "bridge",      "bridge": "cni0",      "isGateway": true,      "ipMasq": true,      "promiscMode": true,      "ipam": {        "type": "host-local",        "ranges": [          [{            "subnet": "172.92.155.0/24"          }]        ],        "routes": [          { "dst": "0.0.0.0/0" }        ]      }    },    {      "type": "portmap",      "capabilities": {"portMappings": true}    }  ]}</code></pre><p><strong>注：</strong>这里的<code>subnet</code>网段尽量根据宿主机<code>IP</code>的最后两位定义，这样便于pod出错后快速定位主机。</p><h6 id="重启containerd："><a href="#重启containerd：" class="headerlink" title="重启containerd："></a>重启containerd：</h6><pre><code>flannel]# ifconfig cni0 down &amp;&amp; ip link del cni0flannel]# systemctl restart containerdflannel]# supervisorctl restart kube-kubelet</code></pre><h6 id="启动flanneld并检查："><a href="#启动flanneld并检查：" class="headerlink" title="启动flanneld并检查："></a>启动flanneld并检查：</h6><pre><code>flannel]# supervisorctl updateflannel]# supervisorctl status</code></pre><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014154326846.png" alt="image-20211014154326846" style="zoom: 80%;"><pre><code>flannel]# kubectl get pod -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014154957780.png" alt="image-20211014154957780"></p><h5 id="2-向平台交付coredns插件"><a href="#2-向平台交付coredns插件" class="headerlink" title="2. 向平台交付coredns插件"></a>2. 向平台交付coredns插件</h5><h6 id="资源清单创建："><a href="#资源清单创建：" class="headerlink" title="资源清单创建："></a>资源清单创建：</h6><pre><code>k8s-master4 ~]# mkdir -p /data/yaml/corednsk8s-master4 ~]# cat &gt; /etc/nginx/conf.d/k8s-yaml.hcloud.com.conf &lt;&lt; EOFserver {    listen 80;    server_name k8s-yaml.hcloud.com;    location / {        autoindex on;        default_type text/plain;        root /data/yaml;   }}EOFk8s-master4 ~]# 重启nginxk8s-master4 ~]# nginx -s reloadk8s-master4 ~]# cd /data/yaml/coredns/</code></pre><h6 id="创建rbac-yaml"><a href="#创建rbac-yaml" class="headerlink" title="创建rbac.yaml:"></a>创建rbac.yaml:</h6><pre><code>k8s-master4 ~]# cat &gt; /data/yaml/coredns/rbac.yaml &lt;&lt; EOFapiVersion: v1kind: ServiceAccountmetadata:  name: coredns  namespace: kube-system  labels:      kubernetes.io/cluster-service: "true"      addonmanager.kubernetes.io/mode: Reconcile---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata:  labels:    kubernetes.io/bootstrapping: rbac-defaults    addonmanager.kubernetes.io/mode: Reconcile  name: system:corednsrules:- apiGroups:  - ""  resources:  - endpoints  - services  - pods  - namespaces  verbs:  - list  - watch---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  annotations:    rbac.authorization.kubernetes.io/autoupdate: "true"  labels:    kubernetes.io/bootstrapping: rbac-defaults    addonmanager.kubernetes.io/mode: EnsureExists  name: system:corednsroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: system:corednssubjects:- kind: ServiceAccount  name: coredns  namespace: kube-systemEOF</code></pre><h6 id="创建cm-yaml"><a href="#创建cm-yaml" class="headerlink" title="创建cm.yaml:"></a>创建cm.yaml:</h6><pre><code>k8s-master4 ~]# cat &gt; /data/yaml/coredns/cm.yaml &lt;&lt; EOFapiVersion: v1kind: ConfigMapmetadata:  name: coredns  namespace: kube-systemdata:  Corefile: |    .:53 {        errors        log        health        ready        kubernetes cluster.local 10.96.0.0/22        forward . 192.168.92.2        cache 30        loop        reload        loadbalance       }EOF</code></pre><h6 id="创建dp-yaml："><a href="#创建dp-yaml：" class="headerlink" title="创建dp.yaml："></a>创建dp.yaml：</h6><pre><code>k8s-master4 ~]# cat &gt; /data/yaml/coredns/dp.yaml &lt;&lt; EOFapiVersion: apps/v1kind: Deploymentmetadata:  name: coredns  namespace: kube-system  labels:    k8s-app: coredns    kubernetes.io/name: "CoreDNS"spec:  replicas: 1  selector:    matchLabels:      k8s-app: coredns  template:    metadata:      labels:        k8s-app: coredns    spec:      priorityClassName: system-cluster-critical      serviceAccountName: coredns      containers:      - name: coredns        image: docker.io/coredns/coredns:1.6.1        args:        - -conf        - /etc/coredns/Corefile        volumeMounts:        - name: config-volume          mountPath: /etc/coredns        ports:        - containerPort: 53          name: dns          protocol: UDP        - containerPort: 53          name: dns-tcp          protocol: TCP        - containerPort: 9153          name: metrics          protocol: TCP        livenessProbe:          httpGet:            path: /health            port: 8080            scheme: HTTP          initialDelaySeconds: 60          timeoutSeconds: 5          successThreshold: 1          failureThreshold: 5      dnsPolicy: Default      volumes:        - name: config-volume          configMap:            name: coredns            items:            - key: Corefile              path: CorefileEOF</code></pre><h6 id="创建svc-yaml："><a href="#创建svc-yaml：" class="headerlink" title="创建svc.yaml："></a>创建svc.yaml：</h6><pre><code>k8s-master4 ~]# cat &gt; /data/yaml/coredns/svc.yaml &lt;&lt; EOFapiVersion: v1kind: Servicemetadata:  name: coredns  namespace: kube-system  labels:    k8s-app: coredns    kubernetes.io/cluster-service: "true"    kubernetes.io/name: "CoreDNS"spec:  selector:    k8s-app: coredns  clusterIP: 10.96.0.2  ports:  - name: dns    port: 53    protocol: UDP  - name: dns-tcp    port: 53  - name: metrics    port: 9153    protocol: TCPEOF</code></pre><h6 id="交付插件："><a href="#交付插件：" class="headerlink" title="交付插件："></a>交付插件：</h6><pre><code>k8s-master4 ~]# kubectl apply -f /data/yaml/coredns/rbac.yamlk8s-master4 ~]# kubectl apply -f /data/yaml/coredns/cm.yamlk8s-master4 ~]# kubectl apply -f /data/yaml/coredns/dp.yamlk8s-master4 ~]# kubectl apply -f /data/yaml/coredns/svc.yml</code></pre><h6 id="测试检查："><a href="#测试检查：" class="headerlink" title="测试检查："></a>测试检查：</h6><pre><code>k8s-master4 ~]# kubectl get pods -n kube-system</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211015144950126.png" alt="image-20211015144950126"></p><p>解析检查如下图：</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211015145614866.png" alt="image-20211015145614866"></p><p>现在k8s集群已经部署完成，但是为了更方便的使用后面会交付<code>traefik</code>、<code>dashboard</code>、<code>prometheus</code>、<code>efk</code> 等服务。下面是是针对整个集群的环境检查。</p><h4 id="五、集群整体环境检查"><a href="#五、集群整体环境检查" class="headerlink" title="五、集群整体环境检查"></a>五、集群整体环境检查</h4><pre><code># 查看个进程状态# supervisorctl status</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014175206117.png" alt="image-20211014175206117"></p><pre><code># 查看网络状态# ip addr</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014180315098.png" alt="image-20211014180315098"></p><pre><code># 查看路由规则# route -n</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014180206102.png" alt="image-20211014180206102"></p><pre><code># 查看集群节点与组件状态# kubectl get cs# kubectl get nodes -o wide# kubectl get pods -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014180722612.png" alt="image-20211014180722612"></p><pre><code># 查看pod信息状态# kubectl get pods -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014181210572.png" alt="image-20211014181210572"></p><h5 id="测试pod之间网络互通"><a href="#测试pod之间网络互通" class="headerlink" title="测试pod之间网络互通"></a>测试pod之间网络互通</h5><pre><code># 启动一个用来测试的pod# kubectl run my-test --image=busybox -- tail -f /dev/null# kubectl get pods -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014182031681.png" alt="image-20211014182031681"></p><p>这里我们可以看到新pod在<code>k8s-node4-2</code>节点上，接下来进入用来测试的<code>pod</code>去<code>ping</code>其他3个节点上的pod。</p><pre><code># kubectl exec -it my-test-f84cbcd45-rcvcg -- sh</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014182727696.png" alt="image-20211014182727696"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
