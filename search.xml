<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Kubectl 创建 Pod 具体构建流程</title>
      <link href="/2022/05/07/shi-yong-kubectl-chuang-jian-pod-ju-ti-gou-jian-liu-cheng/"/>
      <url>/2022/05/07/shi-yong-kubectl-chuang-jian-pod-ju-ti-gou-jian-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/jamiehannaford/what-happens-when-k8s">原文地址</a></p><p><strong>前言</strong></p><blockquote><p>为了确保整体的简单性和易上手，Kubernetes 通过一些简单的抽象隐去操作背后的复杂逻辑，但作为一名有梦想的工程师，掌握其背后的真正思路是十分有必要的。本文以 Kubectl 创建 Pod 为例，向你揭露从客户端到 Kubelet 的请求的完整生命周期。</p></blockquote><p>想象一下，当你想在 Kubernetes 集群部署 Nginx 时，你会执行以下命令：</p><pre class=" language-shell"><code class="language-shell">kubectl run nginx --image=nginx --replicas=3</code></pre><p>​    几秒后，你将看到三个 Nginx Pod 分布在集群工作节点上。这相当神奇，但它背后究竟发生了什么？ </p><p>​    Kubernetes 是一个神奇的框架，它通过用户友好（user-friendly）的 API 处理夸基础架构的 Workload 部署。通过简单的抽象隐藏了背后的复杂性。但是，为了充分理解它为我们提供的价值，我们需要理解它的原理。</p><p><strong>注：</strong>本文所有内容基于 <code>kubenetes v1.14.0</code></p><p>[toc]</p><h3 id="Kubectl"><a href="#Kubectl" class="headerlink" title="Kubectl"></a>Kubectl</h3><hr><h4 id="Validation-验证"><a href="#Validation-验证" class="headerlink" title="Validation (验证)"></a>Validation (验证)</h4><p>​    首先，当我们敲下回车键执行命令后，Kubectl 会执行客户端验证，以确保非法的请求(例如：创建不支持的资源或使用格式错误的镜像名称) 快速失败，并不会发送给 kube-apiserver，即通过减少不必要的负载来提高系统性能。</p><h4 id="Generators-生成器"><a href="#Generators-生成器" class="headerlink" title="Generators (生成器)"></a>Generators (生成器)</h4><p>​    验证通过后，kubectl 开始构造它将发送给 kube-apiserver 的 HTTP 请求。在 Kubernetes 中，访问或更改状态的所有尝试都通过 kube-apiserver 进行，后者又与 etcd 进行通信。Kubectl 客户端也不例外。为了构造 HTTP 请求，Kubectl 使用称为 <a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do">generators</a> 的东西，这是一个负责序列化的抽象概念。</p><p>​    你可能没有注意到，通过 <code>kubectl run</code> 不仅可以运行 <code>deployment</code> ，还可以通过指定参数 <code>--generator</code> 来部署其它 workload。</p><p>​    如果没有指定 <code>--generator</code> 参数的值，Kubectl 将会自动推断资源的类型，具体如下：</p><ul><li>具有 <code>--restart-policy=Always</code> 的资源被视为 Deployment；</li><li>具有 <code>--restart-policy=OnFailure</code> 的资源被视为 Job；</li><li>具有 <code>--restart-policy=Never</code> 的资源被视为 Pod；</li></ul><p>​    当 Kubectl 判断出要创建一个 Deployment 后，它将使用 <code>DeploymentV1Beta1 generator</code> 配合我们提供的参数，生成一个运行时对象（Runtime Obtect）</p><h4 id="API-Group-and-version-negotiation-API-组和版本协商"><a href="#API-Group-and-version-negotiation-API-组和版本协商" class="headerlink" title="API Group and version negotiation (API 组和版本协商)"></a>API Group and version negotiation (API 组和版本协商)</h4><p>​     这里值得指出的是，Kubernetes 使用的是一个分类为 API Group 的版本化 API。它旨在对资源进行分类，以便于推理。</p><p>​     同时，它还为单个 API 提供了更好的版本化方案。Deployment 的 API Group 为 <code>apps</code> ，其最新版本为 <code>v1</code> 。这就是为什么需要在 Deployment manifests 顶部指定 <code>apiVersion: apps/v1</code> 的原因。</p><p>​    kubectl 生成运行时对象之后，开始为它查找合适的 API Group 和版本，然后组装一个知道该资源的各种 REST 语义的版本化客户端。</p><p>​    这个发现阶段称为版本协商（version negotiation），涉及 Kubectl 扫描 remote API 上的 <code>/apis</code>路径以检索所有可能的 API Group。</p><p>​    由于 kube-apiserver 在 <code>/apis</code> 路径中暴露其 OpenAPI 格式的 scheme 文档，因此客户端可以轻松的找到匹配的 API。</p><p>​    为了提高性能，Kubectl 还将 OpenAPI scheme 缓存到 <code>～/.kube/cache/discovery</code> 目录。如果要了解 API 发现的完整过程，你可以尝试删除该目录并在运行 Kubectl 命令时将 <code>-v</code> 参数的值设为最大，然后你将会在日志中看到所有试图找到这些 API 版本的 HTTP 请求。</p><p>​    最后一步才是真正地发送 HTTP 请求。一旦请求获得成功的响应，Kubectl 将会根据所需的输出格式打印 <code>success message</code>。</p><h4 id="Client-Auth-客户端认证"><a href="#Client-Auth-客户端认证" class="headerlink" title="Client Auth (客户端认证)"></a>Client Auth (客户端认证)</h4><p>​    我们在上文中没有提到的一件事是客户端身份验证（这是在发送 HTTP 请求之前处理的），现在让我们来看看。</p><p>​    为了成功发送请求，Kubectl 需要先进行身份验证。用户凭证一般存储在 <code>kubeconfig</code> 文件中，但该文件可以存储在不同的位置。为了定位到它，Kubectl 执行以下操作：</p><ul><li>如果指定参数 <code>--kubeconfig</code>，那么采用该值;</li><li>如果指定环境变量 <code>$KUBECONFIG</code>，那么采用该值；</li><li>否则查看默认的目录，如 <code>~/.kube</code>，并使用找到的第一个文件；</li></ul><p>​    解析文件后，它会确定当前要使用的上下文，当前指向的集群以及当前用户关联的所有身份验证信息。如果用户提供了额外的参数（例如：<code>--username</code>），则这些值优先，并将覆盖 kubeconfig 中指定的值。</p><p>​    一旦有了上述信息，kubectl 就会填充客户端的配置，以便它能够适当的修饰 HTTP 请求：</p><ul><li>x509 证书使用 <code>tls.TLSConfig</code> 发送（包括 CA 证书）；</li><li>bearer tokens 在 HTTP 请求头 Authorization 中发送；</li><li>用户名和密码通过 HTTP 基础认证发送；</li><li>OpenID 认证过程是由用户事先手动处理的，产生一个 像 bearer token 一样被发送的 token；</li></ul><h3 id="Kube-apiserver"><a href="#Kube-apiserver" class="headerlink" title="Kube-apiserver"></a>Kube-apiserver</h3><hr><h4 id="Authentication-认证"><a href="#Authentication-认证" class="headerlink" title="Authentication (认证)"></a>Authentication (认证)</h4><p>​    我们的请求已经发送成功，接下来由 kube-apiserver 处理</p><p>​    kube-apiserver 是客户端和系统组件用来持久化和检索集群状态的主要接口。为了执行其功能，它需要能够验证请求是否合法。此过程称为认证（Authentication）。</p><p>​    为了验证请求，当服务器首次启动时，kube-apiserver 会查看用户提供的所有 <strong>CLI 参数</strong>，并组装合适的 authenticator 列表。</p><ul><li>如果指定参数 <code>--client-ca-file</code>，它会附加 x509 authenticator 到列表中；</li><li>如果指定参数 <code>--token-auth-file</code>，它会附加 token authenticator 到列表中；</li></ul><p>​    每次收到请求时，都会遍历身份验证器列表，直到成功为止：</p><ul><li><strong>x509 handler</strong> 会验证 HTTP 请求是否是通过 CA 根证书签名的 TLS 的密钥编码的；</li><li><strong>bearer token handler</strong> 会验证 HTTP Authorization header 指定的 token 是否存在于 <code>--token-auth-file</code> 参数提供的 token 文件中；</li><li><strong>basicauth handler</strong> 会简单验证 HTTP 请求的基本身份凭证；</li></ul><p>​    如果所有 authenticator 都认证失败，则请求失败并返回汇总的错误信息。</p><p>​    如果认证成功，则会从请求中删除 <code>Authorization</code> 标头，并将用户信息添加到其上下文中。为之后的操作（例如：授权和准入控制器）提供访问先前建立的身份的能力。</p><h4 id="Authorization-授权"><a href="#Authorization-授权" class="headerlink" title="Authorization (授权)"></a>Authorization (授权)</h4><p>​    请求已发送，kube-apiserver 已成功验证我们是谁。</p><p>​    虽然我们证明了自己是谁，但还没证明我们有权执行此操作。毕竟，身份（identity）和许可（permission）并不是一回事。因此 kube-apiserver需要授权。</p><p>​    kube-apiserver 处理授权的方式与身份验证非常相似：基于 <strong>CLI 参数</strong> 输入，汇集一系列 authorizer ，这些 authorizer 将针对每个传入请求运行。如果所有 authorizer 都拒绝该请求，则该请求将导致 <code>Forbidden</code> 响应并且不再继续。如果单个 authorizer 批准，则请求继续。</p><p>​    Kubernetes v1.14 的 authorizer 实例：</p><ul><li><strong>webhook：</strong>与集群外的 HTTP(s) 服务交互；</li><li><strong>ABAC：</strong>执行静态文件中定义的策略；</li><li><strong>RBAC：</strong>执行由集群管理员添加为 k8s 资源的 RBAC 规则；</li><li><strong>Node：</strong>确保 kubelet 只能访问自己节点上的资源；</li></ul><h4 id="Admission-Controller-准入控制器"><a href="#Admission-Controller-准入控制器" class="headerlink" title="Admission Controller (准入控制器)"></a>Admission Controller (准入控制器)</h4><p>​    到目前为止，我们已经过认证并获得了 kube-apiserver 的授权。那接下来呢？</p><p>​    从 kube-apiserver的角度来看，它相信我们是谁并允许我们继续，但是对于 Kubernetes，系统的其它组件对应该和不应该允许发生的内容有异议。所以 <strong>Admission Controller</strong> 该闪亮登场了。</p><p>​    虽然 Authorization 的重点是回答用户是否具有权限，但是 Admission Controllers 人会拦截该请求，以确保其符合集群的更广泛期望和规则。它们是对象持久化到 etcd 之前的最后一个堡垒，因此它们封装了剩余的系统检查以确保操作不会产生意外或负面结果。</p><p>​    Admission Controller 的工作方式类似于 Authentication 和 Authorization 的工作方式，但有一个区别：如果单个 Admission Controller 失败，整个链断开，请求将失败。</p><p>​    Admission Controller 设计的真正优势在于它致力于提升 <strong>可扩展性</strong>。每个控制器都做为插件存储在 <strong>plugin/pkg/admission</strong> 目录中，最后编译进 kube-apiserver二进制文件。</p><p>​    Kubernetes 目前提供十多种 Admission Controller ，此处建议阅读文档 <strong>Kubernetes Admission Controller</strong>。</p><h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><hr><p>​    到目前为止，Kubernetes 已经完全审查了传入的请求，并允许它往下走。在下一步中，kube-apiserver将反序列化 HTTP 请求，构造运行时对象（runtime object），并将它们持久化到 etcd 。</p><p>​    这里插入一下，kube-apiserver 是怎么知道在接受我们的请求时该怎么做呢？</p><p>​    在提供任何请求之前，kube-apiserver 会发生一系列非常复杂的步骤。让我们从第一次运行 kube-apiserver 二进制文件开始：</p><ol><li>当运行 kube-apiserver 二进制文件时，它会创建一个服务链，允许 apiserver 聚合。这是一种支持多 apiserver 的方式；</li><li>之后，它会创建一个用作默认实现的 <strong>generic apiserver</strong> ；</li><li>使用生成的 <strong>OpenAPI shceme</strong> 填充 apiserver 配置；</li><li>然后，kube-apiserver 遍历 scheme 中指定的所有 API Group，并为其构造 <strong>storage provider</strong> 。当你访问或变更资源状态时，kube-apiserver 就会调用这些 API Group；</li><li>对于每个 API Group ，他还会迭代每个组版本，并为每个 <strong>HTTP</strong> 路由安装 <strong>REST</strong> 映射。这允许 kube-apiserver映射请求，并且一旦找到匹配就能够委托给正确的代码逻辑；</li><li>对于文本的特定用例，将注册一个 POST handler ，该处理程序将委托给 create resource handler。</li></ol><p>​    到目前为止，kube-apiserver 完全知道存在哪些路由及内部映射，当请求匹配时，可以知道调用那些处理程序和存储程序。这是非常完美的设计模式。这里我们假设 HTTP 请求已经被 kube-apiserver 收到了：</p><ol><li>如果程序处理链可以请求与注册的路由匹配，它会将该请求交给注册到该路由的 dedicated handler。否则它会回退到 path-based handler (这是调用 <code>/apis</code> 时会发生的情况) 。如果没有为该路由注册处理程序，则会调用 not found handler，最终返回 <code>404</code> ；</li><li>幸运的是，我们有一个处理器名为 createHandler！它有什么作用？它将首先解码 HTTP 请求并执行基础验证，例如确保请求提供的 JSON 与我们的版本化 API 资源匹配；</li><li>审计和准入控制阶段；</li><li>然后，资源会通过 storage provider 存储到 etcd 中。默认情况下，保持到 etcd 的键的格式为 <code>&lt;namespace&gt;/&lt;name&gt;</code> ，当然，它也支持自定义；</li><li>资源创建过程中出现的任何错误都会被捕获，最后 storage provider 会执行 get 调用来确认该资源是否被成功创建。如果需要额外的清理工作（finalization），就会调用后期创建的处理器和装饰器；</li><li>最后，构造 HTTP 响应并返回给客户端；</li></ol><p>​    这么多步骤！能够坚持走到这里是非常了不起的，并且我们意识到了 kube-apiserver 实际上做了很多工作。总结一下：我们部署的 Deployment 现在存在于 etcd 中，但仍没有看到它真正的 work…</p><p><strong>注：</strong>在 Kubernetes v1.14 之前，这往后还有 Initializer 的步骤，该步骤在 v1.14 被 webhook admission 取代。</p><h3 id="Kube-Controller-Manager-控制管理器"><a href="#Kube-Controller-Manager-控制管理器" class="headerlink" title="Kube Controller Manager (控制管理器)"></a>Kube Controller Manager (控制管理器)</h3><hr><h4 id="Deployment-Controller-部署控制器"><a href="#Deployment-Controller-部署控制器" class="headerlink" title="Deployment Controller (部署控制器)"></a>Deployment Controller (部署控制器)</h4><p>​    截至目前，我们的 Deployment 已经存储于 etcd 中，并且所有的初始化逻辑都已完成。接下来的阶段将涉及 Deployment 所以依赖的资源拓扑结构。</p><p>​    在 Kubernetes，Deployment 实际上只是 ReplicaSet 的集合，而 ReplicaSet 是 Pod 的集合。那么 Kubernetes 如何从一个 HTTP 请求创建这个层次结构呢？这就不得不提 Kubernetes 的内置控制器（Controller）。</p><p>​    Kubernetes 系统中使用了大量的 Controller，Controller 是一个用于将系统状态从 <code>当前状态</code>调谐到 <code>期望状态</code>的异步脚本。所有内置的 Controller 都通过组件 kube-controller-manager 并行运行，每种 Controller 都负责一种具体的控制流程。</p><p>​    首先，我们介绍一下 Deployment Controller：</p><p>​    将 Deployment 存储到 etcd 后，我们通过 kube-apiserver 可以看到它。当这个新资源可用时，Deployment Controller 会检测到它，它的工作是监听 Deployment 的更改。在我们的例子中，Controller 通过注册创建事件的回调函数。</p><p>​    当我们的 Deployment 首次可用时，将执行此回调函数，并将该对象添加到内部工作队列 (interbal work queue)。</p><p>​    当它处理我们的 Deployment 对象时，控制器将检查我们的 Deployment 并意识到没有与之关联的 ReplicaSet 或 Pod。</p><p>​    它通过使用标签选择器（label selectors）查询 kube-apiserver 来实现此功能。有趣的是，这个同步过程是状态不可知的。另外，它以相同的方式调谐新对象和已存在的对象。</p><p>​    在意识到没有与其关联的 ReplicaSet 或 Pod 后， Deployment Controller 就会开始执行弹性伸缩流程 (scaling process)。它通过推出（例如：创建）一个 ReplicaSet，为期分配 label selector 并将其版本号设置为 1。</p><p>​    ReplicaSet 的 PodSpec 字段是从 Deployment 的 manifest 以及其他相关元数据中复制而来。有时Deployment 在此之后也需要更新（例如：如果设置了 process deadline）。</p><p>​    当完成以上步骤之后，该 Deployment 的 status 就会被更新，然后重新进入与之前相同的循坏，等待 Deployment 与期望的状态相匹配。由于 Deployment Controller 只关心 ReplicaSet，因此调谐过程将有 ReplicaSet controller 继续。</p><h4 id="ReplicaSet-Controller-副本控制器"><a href="#ReplicaSet-Controller-副本控制器" class="headerlink" title="ReplicaSet Controller (副本控制器)"></a>ReplicaSet Controller (副本控制器)</h4><p>​    在上一步中，Deployment Controller 创建了属于该 Deployment 的第一个 ReplicaSet，但仍然没有创建 Pod。所以这里我们需要引入 ReplicaSet Controller ！</p><p>​    ReplicaSet Controller 的工作是监视 ReplicaSet 及其相关资源 Pod 的生命周期。与大多数其它控制器一样，它通过触发某些事件的处理程序来实现。</p><p>​    当创建 ReplicaSet 时（由 Deployment Controller 创建），ReplicaSet Controller 会检查新 ReplicaSet 的状态，并意识到现有状态与期望状态之间存在偏差。然后，它试图通过调整 pod 的副本数来调谐这种状态。</p><p>​    Pod 的创建也是批量进行的，从数量 <code>SlowStartInitialBatchSize</code> 开始，然后在每次成功的迭代中以一种 <code>slow start</code> 操作加倍。这样做的目的是在大量 Pod 启动失败时（例如：由于资源配额）可以减轻 kube-apiserver 由于大量不必要的 HTTP 请求导致崩溃的风险。</p><p>​    Kubernetes 通过 Owner References （子资源的某个字段中引用其父资源的 ID ）来执行严格的资源对象层级结构。这确保了一旦 Controller 管理的资源被删除（级联删除），子资源就会被垃圾收集器删除，同时还为父资源提供了一种有效的方式来避免它们竞争同一个子资源（想象两对父母认为他们拥有同一个孩子的场景）。</p><p>​    Owner References 的另一个好处是，它是有状态的。如果重启任何的 Controller，那么犹豫资源对象的拓扑关系与 Controller 无关，该重启时间不会影响到系统的稳定运行。这种对资源隔离的重视也体现在 Controller 本身的设计中：Controller 不能对自己没有明确拥有的资源进行操作，他们之间互不干涉，互不共享。</p><p>​    有时系统中也会出现孤儿（orphaned）资源，通常由以下两种途径产生：</p><ul><li>父资源被删除，但子资源没有被删除</li><li>垃圾收集策略禁止删除子资源</li></ul><p>当发生这种情况时，Controller 将会确保孤儿资源拥有新的 Owner。多个父资源可以相互竞争同一个孤儿资源，但只有一个会成功（其他父资源会收到一个验证错误）。</p><h4 id="Informers-线人"><a href="#Informers-线人" class="headerlink" title="Informers (线人)"></a>Informers (线人)</h4><p>​    你可能已经注意到，有些 Contoller （例如：RBAC 授权器或 Deployment Controller ）需要检索集群状态然后才能正常运行。</p><p>​    以 RBAC authorizer 举例，当请求进入时，authorizer 会将用户的初始状态缓存下来供以后使用，然后用它来检索与 etcd 中的用户关联的所有 <code>角色（Role）</code> 和 <code>角色绑定（RoleBinding）</code>。</p><p>​    那么 Controller 是如何访问和修改这些资源对象的呢？ 答案是引入 Informers。</p><p>​    Informers 是一种模式，它允许 Controller 订阅存储事件并列出它们感兴趣的资源。除了提供一个很好的工作抽象，它还需要处理很多细节，如缓存（缓存很重要，因为他减少了不必要的 kube-apiserver 连接，并减少了服务器端和控制端的重复序列化成本 ）。通过使用这种设计，它还允许 Controller 以线程安全（thread safe）的方式进行交互，而不必担心线程冲突。</p><p>​    有关 Informers 的更多信息，可深入阅读<a href="http://borismattijssen.github.io/articles/kubernetes-informers-controllers-reflectors-stores">《Kubernetes：Controllers, Informers, Reflectors and Stores》</a></p><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><hr><p>​    当所有的 Controller 正常运行后，etcd 中就会保存一个 Deployment、一个 ReplicaSet 和三个 Pod，并且可以通过 kube-apiserver 查看到。然而，这些 Pod 还处于 <code>Pending</code> 状态，因为他们还没有被调度到集群中合适的 Node 上。最终解决这个问题的 Controller 是 Scheduler。</p><p>​    Scheduler 作为一个独立的组件运行在集群控制平面上，工作方式与其他 Controller 相同：监听事件并调谐状态。</p><p>​    具体来说，Scheduler 的作用是过滤 PodSpec 中 <code>NodeName</code> 字段为空的 Pod 并尝试 将其调度到合适的节点。</p><p>​    为了找到合适的节点，Scheduler 会使用特定的算法，默认调度算法工作流程如下：</p><ol><li>当 Scheduler 启动时，会注册一系列默认的预选策略，这些预选策略会对候选节点进行评估，判断候选节点是否满足候选 Pod 的需求。例如：如果 PodSpec 显示地限制了 CPU 和内存资源，并且节点的资源容量不满足候选 Pod 的需求时，Pod 就不会被调度到该节点上（资源容量 = 节点资源总量 - 节点中已运行的容量需求资源（CPU 和内存）总和）；</li><li>一旦选择了适当的节点，就会对剩余的节点运行一系列优先级函数，已对候选节点进行打分。例如，为了在整个系统中分散工作负载，它将偏好于资源请求较少的节点（因为这表明运行的工作负载较少）。当它运行这些函数时，他为每个节点分配一个成绩。然后选择分数最高的节点进行调度。</li></ol><p>​    一旦算法找到了合适的节点， Scheduler 就会创建一个 Binding 对象，该对象的 Name 和 Uid 与 Pod 相匹配，并且其 <code>ObjectReference</code> 字段包含所选节点的名称，然后通过发送 POST 请求给 kube-apiserver。</p><p>​    当 kube-apiserver接收到此 Binding 对象时，注册表会将该对象反序列化 （registry deserializes）并更新 Pod 资源中的以下字段：</p><ol><li>将 NodeName 的值设置为 Binding 对象 ObjectReference 中的 NodeName；</li><li>添加相关的注释（annotations）；</li><li>将 PodScheduled 的 status 设置为 True。</li></ol><p>​    一旦 Scheduler 将 Pod 调度到某个节点上，该节点的 Kubelet 就会接管该 Pod 并开始部署。</p><p>​    附注：自定义调度器：有趣的是预选策略和优先级函数 （predicates and priority functions） 都是可扩展的，可以使用参数 <code>--policy-config-file</code> 来定义。这引入了一定程度的灵活性。管理员还可以在独立部署中运行自定义调度器（具有自定义处理逻辑的调度器）。如果 PodSpec 中包含 <code>schedulerName</code>，Kubernetes 会将该 pod 的调度移交给使用该名称注册的调度器。</p><h3 id="Kubelet"><a href="#Kubelet" class="headerlink" title="Kubelet"></a>Kubelet</h3><hr><h4 id="Pod-Sync-Pod-同步"><a href="#Pod-Sync-Pod-同步" class="headerlink" title="Pod Sync (Pod 同步)"></a>Pod Sync (Pod 同步)</h4><p>​    截至目前，所有的 COntroller 都完成了工作，让我们来总结一下：</p><ol><li>HTTP 请求通过了认证、授权和准入控制阶段；</li><li>一个 Deployment、ReplicaSet 和三个 Pod 被持久化到 etcd；</li><li>最后每个 Pod 都被调度到合适的节点；</li></ol><p>​    然而，到目前为止，所有的状态变化仅仅只是针对保存在 etcd 中的资源对象，接下来的步骤涉及到在工作节点之间运行具体的容器，这是分布式系统 Kubernetes 的关键因素。这些事情都是由 Kubelet 完成的。</p><p>​    在 Kubernetes 集群中，每个 Node 节点上都会启动一个 Kubelet 服务进程，该进程用于处理 Scheduler 下发到本节点的 Pod 并管理其生命周期。这意味着它将处理 Pod 与 Container Runtime 之间所有的转换逻辑，包括挂载卷、容器日志、垃圾回收等操作。</p><p>​    一个有用的方法，你可以把 Kubelet 当成一种特殊的 Controller，它每隔 20 秒（可以自定义）向 kube-apiserver 查询 Pod，过滤 NodeName 与自身所在节点匹配的 Pod 列表。</p><p>​    一旦获取到了这个列表，它就会通过与自己的内部缓存进行比较来检测差异，如果有差异，就开始同步 Pod 列表。我们来看看同步过程是什么样的：</p><ol><li>如果 Pod 正在创建，Kubelet 就会暴露一些指标，可以用于在 Prometheus 中追踪 Pod 启动延时；</li><li>然后，生成一个 PodStatus 对象，表示 Pod 当前阶段的状态。Pod 的 Phase 状态是 Pod 在其生命周期中的高度概括，包括 <code>Pending</code>、<code>Running</code>、<code>Succeeded</code>、<code>Failed</code> 和 <code>Unknown</code> 这几个值。状态的产生过程非常复杂，因此很有必要深入挖一下：</li></ol><ul><li>首先，串行执行一系列 <code>PodSyncHandlers</code>，每个处理器检查 Pod 是否应该运行在该节点上。当其中之一的处理器认为该 Pod 不应该运行在该节点上，则 Pod 的 Phase 值就会变成 <code>PodFailed</code> 并将从该节点被驱逐。例如，以 Job 为例，当一个 Pod 失败重试的时间超过了 <code>activeDeadlineSeconds</code>设置的值，就会将该 Pod 从该节点驱逐出去；</li><li>接下来，Pod 的 Phase 值由 Init 容器和主容器状态共同决定。由于主容器尚未启动，容器被视为处于等待阶段，如果 Pod 中至少有一个容器处于等待阶段，则其 Phase 值为 <code>Pending</code>。</li><li>最后，Pod 的 Condition 字段由 Pod 内所有容器状态决定。现在我们的容器还没有被容器运行时（Container Runtime）创建，所以，Kubelet 将 <code>PodReady</code> 的状态设置为 <code>False</code>。</li></ul><ol start="3"><li>生成 PodStatus 之后，Kubelet 就会将它发送到 Pod 的 status 管理器，该管理器的任务是通过 Kube-apiserver 异步更新 etcd 中的记录；</li><li>接下来运行一系例 admit handlers 以确保该 Pod 具有正确的权限（包括强制执行 AppArmor profiles 和 NO_NEW_PRIVS），在该阶段被拒绝的 Pod 将永久处于 <code>Pending</code> 状态；</li><li>如果 Kubelet 启动时指定来 <code>--cgroups-per-qos</code>的参数，Kubelet 就会为该 Pod 创建 cgroup 并设置对应的资源限制。这是为了更好的 Pod 服务质量（Qos）；</li><li>为 Pod 创建相应的数据目录，包括：</li></ol><ul><li>Pod 目录（通常是 <code>/var/run/kubelet/pods/&lt;podID&gt;</code>）;</li><li>Pod 的挂载卷目录（<code>&lt;podDir&gt;/volumes</code>）;</li><li>Pod 的插件目录（<code>&lt;podDir&gt;/plugins</code>）;</li></ul><ol start="7"><li>卷管理器会挂载 <code>Spec.Volumes</code> 中定义的相关数据卷，然后等待挂载成功；</li><li>从 kube-apiserver 中检索 <code>Spec.ImagePullSecrets</code>，然后将对应的 Secret 注入到容器中；</li><li>最后，通过容器运行时（Container Runtime）启动容器；</li></ol><h4 id="CRI-and-pause-container-容器运行时和sandbox"><a href="#CRI-and-pause-container-容器运行时和sandbox" class="headerlink" title="CRI and pause container (容器运行时和sandbox)"></a>CRI and pause container (容器运行时和sandbox)</h4><p>​     到了这个阶段，大量的初始化工作都已经完成，容器已经准备好开始启动了，而容器时由容器运行时（例如 Docker）启动的。</p><p>​    为了更具可扩展性，Kubelet 使用 CRI（Container RUntime Interface）来与具体的容器运行时进行交互。简而言之，CRI 提供 Kubelet 和特定容器运行时现实之间的抽象。通过 protocol buffers （一种更快的 JSON）和 GRPC API （一种非常适合执行 Kubernetes 操作的 API）进行通行。</p><p>​    这是一个非常酷的想法，因为通过在 Kubelet 和容器运行时之间使用已定义的接口约定，容器编排的实际实现细节变得无关紧要。重要的是接口约定。这允许以最小的开销添加新的容器运行时，因为没有核心 Kubernetes 代码需要更改！</p><p>​    回到部署我们的容器，当一个 Pod 首次启动时， Kubelet 调用 RunPodSandbox 远程过程命令（remote procedure command RPC）。沙箱（sandbox）是描述一组容器的 CRI 术语，在 Kubernetes 中对应的是 Pod。这个术语是故意模糊的，因此其他不使用容器的运行时，不会失去其意义（想象一个基于 hypervisor 的运行时，沙箱可能值得是 VM）。</p><p>​    在我们的例子中，我们使用的是 Docker。在 Docker 中，创建沙箱涉及创建 <code>pause</code>容器。</p><p>​    <code>pause</code>容器向 Pod 中的所有其他容器的父级一样，因为它承载了工作负载容器最终将使用的许多 Pod 级资源。这些“资源”是 Linux Namespaces（IPC，Network，PID）。</p><blockquote><p>如果你不熟悉容器在 Linux 中的工作方式，那么我们快速回顾一下。Linux 内核具有 Namespace 的概念，允许主机操作系统分割出一组专用资源（例如 CPU 或内存）并将其提供给一个进程，就好像它是世界上唯一使用它们的东西一样。Cgroup 在这里也很重要，因为它们是 Linux 管理资源隔离的方式。Docker 使用这两个内核功能来托管一个保证资源强制隔离的进程。更多信息，可深入阅读 <a href="https://jvns.ca/blog/2016/10/10/what-even-is-a-container/">What even is a Container?</a></p></blockquote><p>​    <code>pause</code> 容器提供了一种托管所有这些 Namespaces 的方法，并允许自容器共享它们。通过成为同一 Network Namespace 的一部分，一个好处是同一个 Pod 中的容器可以使用 localhost 相互访问。</p><p>​    <code>pause</code>容器的第二个好处与 PID Namespace 有关。在这些 Namespace 中，进程形成一个分层树（hierarchical tree），顶部的”init”进程负责”收获”僵尸进程。更多信息，请深入阅读 <a href="https://www.ianlewis.org/en/almighty-pause-container">great blog post</a></p><p>​    创建 <code>pause</code>容器后，将开始检查磁盘状态然后启动主容器。</p><h4 id="CNI-and-pod-networking-容器网络接口和-pod-网络"><a href="#CNI-and-pod-networking-容器网络接口和-pod-网络" class="headerlink" title="CNI and pod networking (容器网络接口和 pod 网络)"></a>CNI and pod networking (容器网络接口和 pod 网络)</h4><p>​    现在，我们的 Pod 有了基本的骨架：一个 <code>pause</code>容器，它托管所有 Namespaces 以允许 Pod 间通信。但容器网络如何运作以及建立的？</p><p>​    当 Kubelet 为 Pod 设置网络时，它将任务委托给 <code>CNI（Container Network Interface）</code>插件。其运行方式与 Container Runtime Interface 类似。简而言之，CNI 是一种抽象，允许不同的网络提供商对容器使用不同的网络实现。</p><p>​    Kubelet 通过 stdin 将 JSON 数据（配置文件位于 <code>/etc/cni/net.d</code>中）传输到相关的 CNI 二进制文件（位于 <code>/opt/cni/bin</code>）中与之交互。下面是一个简单的实例 JSON 配置文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">{</span>    <span class="token key atrule">"cniVersion"</span><span class="token punctuation">:</span> <span class="token string">"0.3.1"</span><span class="token punctuation">,</span>    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"bridge"</span><span class="token punctuation">,</span>    <span class="token key atrule">"type"</span><span class="token punctuation">:</span> <span class="token string">"bridge"</span><span class="token punctuation">,</span>    <span class="token key atrule">"bridge"</span><span class="token punctuation">:</span> <span class="token string">"cnio0"</span><span class="token punctuation">,</span>    <span class="token key atrule">"isGateway"</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>    <span class="token key atrule">"ipMasq"</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token punctuation">,</span>    <span class="token key atrule">"ipam"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token key atrule">"type"</span><span class="token punctuation">:</span> <span class="token string">"host-local"</span><span class="token punctuation">,</span>        <span class="token key atrule">"ranges"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token key atrule">"subnet"</span><span class="token punctuation">:</span> <span class="token string">"${POD_CIDR}"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token key atrule">"routes"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token key atrule">"dst"</span><span class="token punctuation">:</span> <span class="token string">"0.0.0.0/0"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    CNI 插件还可以通过 <code>CNI_ARGS</code>环境变量为 Pod 指定其他的元数据，包括 Pod Name 和 Namespace。</p><p>​    接下来会发生什么取决于 CNI 插件，这里，我们以 <code>bridge</code>CNI插件为例：</p><ol><li>该插件首先会在 Root Network Namespace（也就是宿主机的 Network Namespace）中设置本地 Linux 网桥，以便为该主机上的所有容器提供网络服务；</li><li>然后它会将一个网络接口（veth 设备对的一端）插入到 <code>pause</code> 容器的 Network Namespace 中，并将另一端连接到网桥上。你可以这样来理解 veth 设备对：它就像一根很长的管道，一端连接到容器，一端连接到 Root Network Namespace 中，允许数据包在中间传输；</li><li>然后它会为 <code>pause</code>容器的网络接口分配一个 IP 并设置相应的路由，于是 Pod 就有了自己的 IP。IP 的分配是由 JSON 配置文件中指定的 IPAM plugin 实现的；</li></ol><ul><li>IPAM plugin 的工作方式和 CNI 插件类似：通过二进制文件调用并具有标准化的接口，每一个 IPAM plugin 都必须要确定容器网络接口的 IP、子王以及网关和路由，并将信息返回给 CNI 插件。最常见的 IPAM plugin 称为 host-local，它从预定义的一组地址池为容器分配 IP 地址。它将相关信息保存在主机的文件系统中，从而确保了单个主机上每个容器 IP 地址的唯一性。</li></ul><ol start="4"><li>对于 DNS，kubelet 将为 CNI 插件指定 Kubernetes 集群内部 DNS 服务器 IP 地址，确保正确设置容器的 <code>resolv.conf</code> 文件。</li></ol><h4 id="Inter-host-networking"><a href="#Inter-host-networking" class="headerlink" title="Inter-host networking"></a>Inter-host networking</h4><p>​    到目前为止，我们已经描述了容器如何与宿主机进行通行，但夸主机之间容器如何通信呢？</p><p>​    通常情况下，Kubernetes 使用 Overlay 网络来进行夸主机容器通行，这是一种动态同步多个主机间路由的方法。一个较常用的 Overlay 网络插件是 <code>flannel</code>，它提供了跨节点的三层网络。</p><p>​    flannel 不会管容器与宿主机之间的通信（这是 CNI 插件的职责），但它对主机间的流量传输负责。为此，它为主机选择一个子网并将其注册到 etcd。然后，它保留集群路由的本地表示，并将传出的数据包封装在 UDP 数据包中，确保它到达正确的主机。</p><p>​    更多信息，请深入阅读 <a href="https://github.com/flannel-io/flannel">CoreOS’s documentaion</a>。</p><h4 id="Container-startup-容器启动"><a href="#Container-startup-容器启动" class="headerlink" title="Container startup (容器启动)"></a>Container startup (容器启动)</h4><p>​    所有的网络配置都已完成。还剩什么？真正地启动工作负载容器！</p><p>​    一旦沙箱完成初始化并处于 <code>active</code> 状态，Kubelet 将开始为其创建容器。首先启动 PodSpec 中定义的 Init Container，然后在启动主容器。具体过程如下：</p><ol><li>拉取容器的镜像。如果是私有仓库的镜像，就会使用 PodSpec 中指定的 imagePullSecrets 来拉取该镜像；</li><li>通过 CRI 创建容器。Kubelet 使用 PodSpec 中的信息填充来一个 <code>ContainerConfig</code>数据结构（在其中定义了 command、image、labels、mounts、devices、environment variables 等），然后通过 protobufs 发送给 CRI。对于 Docker 来说，它会将这些信息反序列化并填充到自己的配置信息中，然后再发送给 Dockerd 守护进程。在这个过程中，它会将一些元数据（例如容器类型，日志路径，sandbox ID 等）添加到容器中；</li><li>然后 Kubelet 将容器注册到 CPU 管理器，它通过使用 <code>UpdateContainerResources</code> CRI 方法给容器分配给本地节点上的 CPU 资源；</li><li>最后容器真正地启动；</li><li>如果 Pod 中包含 Container Lifecycle Hooks，容器启动之后就会运行这些 Hooks。Hook 的类型包括两种：Exec（执行一段命令）和 HTTP（发送 HTTP 请求）。如果 PodStart Hook 启动的时间过长、挂起或者失败，容器将永远不会变成 <code>Running</code>状态。</li></ol><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a>Wrap-up</h3><hr><p>最后的最后，现在我们的集群上应该会运行三个容器，分布在一个或多个工作节点上。所有的网络，数据卷和密钥都由 Kubelet 填充，并通过 CRI 接口添加到容器中并配置成功！</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> pod </tag>
            
            <tag> container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本三剑客sed的使用</title>
      <link href="/2022/05/03/wen-ben-san-jian-ke-sed/"/>
      <url>/2022/05/03/wen-ben-san-jian-ke-sed/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 文本操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟地址空间与上下文切换详解</title>
      <link href="/2021/05/03/xu-ni-di-zhi-kong-jian-yong-hu-kong-jian-nei-he-kong-jian-yong-hu-tai-yu-nei-he-tai-yuan-li-he-zuo-yong/"/>
      <url>/2021/05/03/xu-ni-di-zhi-kong-jian-yong-hu-kong-jian-nei-he-kong-jian-yong-hu-tai-yu-nei-he-tai-yuan-li-he-zuo-yong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6990237426903957540">原文地址</a></p><h2 id="虚拟地址空间、用户空间、内核空间、用户态与内核态是什么？"><a href="#虚拟地址空间、用户空间、内核空间、用户态与内核态是什么？" class="headerlink" title="虚拟地址空间、用户空间、内核空间、用户态与内核态是什么？"></a>虚拟地址空间、用户空间、内核空间、用户态与内核态是什么？</h2><h3 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h3><p>​    为了节约内存，提高使用效率，操作系统会将内存拆成一个个的小块来使用，在Linux 中，这每一小块叫做 **page(页)**，大小一般为4k</p><hr><h3 id="虚拟地址空间"><a href="#虚拟地址空间" class="headerlink" title="虚拟地址空间"></a>虚拟地址空间</h3><p><strong>定义</strong>：在多任务操作系统中，每个进程都运行在属于自己的虚拟内存中，这块空间被称为 <strong>Virtual Address Space(虚拟地址空间)</strong></p><p><strong>作用</strong>：虚拟地址空间的作用是为了让进程之间相互隔离，假如让进程直接操作<strong>物理内存</strong>，很有可能会出现，不同进程都操作了同一物理内存地址，造成相互影响。于是就抽象出来<strong>虚拟地址空间</strong>这样一个中间层，让一块虚拟地址空间映射到一块物理地址空间上</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220505164057203.png" alt="image-20220505164057203"></p><p>如上图，两块虚拟内存通过 <strong>page table(页表)</strong> 将自己映射到无力内存上，进程只能看到虚拟内存(当然它自己是不知道内存是虚拟的)，进程只能”运行”在虚拟地址空间，只会操作属于自己的虚拟内存，因此进程之间不会相互影响</p><hr><h3 id="虚拟地址空间的大小及分配"><a href="#虚拟地址空间的大小及分配" class="headerlink" title="虚拟地址空间的大小及分配"></a>虚拟地址空间的大小及分配</h3><p>​    操作系统需要为每一个进程分配属于自己的虚拟内存，那这个虚拟内存要分配多大呢？在没有虚拟地址空间之前，是根据进程的需要按需分配物理内存的。但有了虚拟地址空间，分配策略可以变一下，先把虚拟地址空间分配的大些，但不立马建立与物理内存的映射，而是用到的时候，用多少建立多少。这样物理内存的大小虽然不变，但是内存分配的灵活性大大的提高了，进程也不用担心地址跟别的进程冲突</p><hr><h3 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h3><p>操作系统虽然为每个进程都分配了虚拟地址空间，但虚拟地址空间中并不是所有的区域都可以为进程所用。操作系统将虚拟地址空间分为用户空间和内核空间，对于32位的操作系统，在Linux的虚拟地址空间中，用户空间和内核空间的大小比例为3:1，而在windows中则为2:2</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220505184608068.png" alt="image-20220505184608068"></p><hr><h3 id="为什么会有内核空间"><a href="#为什么会有内核空间" class="headerlink" title="为什么会有内核空间"></a>为什么会有内核空间</h3><p>​    为了系统的安全，现代的操作系统一般都强制用户进程不能直接操作内核的，所有的系统调用都要交给内核完成。但是内核也要运行在内存中，为了防止用户进程干扰，操作系统为内核单独划分了一块内存区域，这块区域就是内核空间，系统内核运行在内核空间中</p><hr><h3 id="内核空间与用户空间的映射"><a href="#内核空间与用户空间的映射" class="headerlink" title="内核空间与用户空间的映射"></a>内核空间与用户空间的映射</h3><p>​    在Linux中，系统启动时，需要将内核加载到物理内存的内核空间上运行。但对于进程，物理内存对它是不可见的，但它又需要使用内核来完成各种系统的调用，而内核世纪又在物理内存上。怎么解决这个矛盾？</p><p>​    Linux 想了一个办法，将进程的虚拟地址空间中的内核空间映射到物理内存中的内核空间上，内核就搬到虚拟内存中了。而在进程看来，自己的内存中就有了内核，就可以通过内核进行各种系统调用。</p><p>​    在 Linux 中，内核空间是持续的，并且所有进程的虚拟地址空间中的内核空间都映射到同样的物理内存的内核空间</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220505192322010.png" alt="image-20220505192322010"></p><p>​    如上图所示：进程a 和进程b 的内核空间都映射到了同一块物理内存区域，而用户空间的地址，则被映射到了不同的物理内存区域</p><hr><h3 id="用户态与内核态"><a href="#用户态与内核态" class="headerlink" title="用户态与内核态"></a>用户态与内核态</h3><p>​    当一个进程执行系统调用而陷入内核代码中执行时，就称进程处于内核运行态(简称为内核态)</p><p>比如有一个写文件的 <strong>python</strong>程序</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fw<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 打开文件</span>    fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'内容'</span><span class="token punctuation">)</span></code></pre><p>​     当我们把这个 <strong>python</strong> 程序时运行起来之后就是一个进程了，也有了自己的虚拟地址空间，包括用户空间和内核空间。刚开始这个进程是运行在用户空间，但当执行到 <code>fw.write('内容')</code> 时，发现要往磁盘中写入一个文件，而读写磁盘这种事，只有内核才能操作，内核提供了一个 <code>write</code> 系统级函数，<code>fw.write('内容')</code> 这段代码最终时执行 <code>write()</code> 系统调用来实现文件写入的</p><p>​    刚开始的 <strong>python</strong> 代码是加载到用户空间的内存中运行的，当执行 <code>write()</code> 系统调用时，<code>write()</code> 是在内核空间运行的，但它们都属于同一进程，只是在执行系统调用的时候发生一个状态的切换。</p><p>​     程序运行在用户空间的时候，进程处于用户态，程序进入到内核运行后，进程处于内核态，这两种状态的切换就被称为上下文切换</p><blockquote><p>上下文切换是很消耗资源的，所以要尽量避免上下文切换</p></blockquote><hr><h3 id="用户态切换到内核态的3种方式"><a href="#用户态切换到内核态的3种方式" class="headerlink" title="用户态切换到内核态的3种方式"></a>用户态切换到内核态的3种方式</h3><ul><li><p><strong>系统调用</strong> : 这是<strong>用户态进程主动</strong>要求切换到<strong>内核态</strong>的一种方式，<strong>用户态进程</strong>通过系统调用申请使用操作系统提供的服务程序完成工作，而系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现，例如 Linux 的 int 80h 中断。</p></li><li><p><strong>异常</strong> : 当 CPU 在执行运行在<strong>用户态</strong>下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了<strong>内核态</strong>，比如缺页异常。</p></li><li><p><strong>外围设备的中断</strong> : 当外围设备完成用户请求的操作后，会向 <strong>CPU</strong> 发出相应的中断信号，这时 <strong>CPU</strong> 会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机组成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Traefik 服务发现之 etcd</title>
      <link href="/2021/05/03/traefik-fu-wu-fa-xian-zhi-etcd/"/>
      <url>/2021/05/03/traefik-fu-wu-fa-xian-zhi-etcd/</url>
      
        <content type="html"><![CDATA[<p><img src="https://doc.traefik.io/traefik/assets/img/traefik-architecture.png"></p><h4 id="基础环境准备"><a href="#基础环境准备" class="headerlink" title="基础环境准备"></a>基础环境准备</h4><p>文件目录结构如下：</p><pre class=" language-bash"><code class="language-bash">tree ././├── docker-compose.yaml├── etcd│   └── data├── nginx1│   └── html│       └── index.html├── nginx2│   └── html│       └── index.html└── traefik    ├── log    └── traefik.yml</code></pre><p>首先我们准备 <code>docker-compose.yaml</code> 文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># docker-compose.yaml</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Etcd </span>  <span class="token key atrule">etcd</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> etcd    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">image</span><span class="token punctuation">:</span> bitnami/etcd<span class="token punctuation">:</span>latest    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ALLOW_NONE_AUTHENTICATION=yes      <span class="token punctuation">-</span> ETCD_ADVERTISE_CLIENT_URLS=http<span class="token punctuation">:</span>//etcd<span class="token punctuation">:</span><span class="token number">2379</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 2379<span class="token punctuation">:</span><span class="token number">2379</span>      <span class="token punctuation">-</span> 2380<span class="token punctuation">:</span><span class="token number">2380</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>PWD<span class="token punctuation">}</span>/etcd<span class="token punctuation">:</span>/bitnami/etcd  <span class="token comment" spellcheck="true"># traefik</span>  <span class="token key atrule">traefik</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> traefik    <span class="token key atrule">image</span><span class="token punctuation">:</span> traefik<span class="token punctuation">:</span>latest    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>api.insecure=true <span class="token punctuation">-</span><span class="token punctuation">-</span>providers.docker    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>      <span class="token punctuation">-</span> 443<span class="token punctuation">:</span><span class="token number">443</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>PWD<span class="token punctuation">}</span>/traefik/traefik.yml<span class="token punctuation">:</span>/etc/traefik/traefik.yml      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>PWD<span class="token punctuation">}</span>/traefik/log<span class="token punctuation">:</span>/var/log/traefik/log  <span class="token comment" spellcheck="true"># nginx1</span>  <span class="token key atrule">nginx1</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx1    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>PWD<span class="token punctuation">}</span>/nginx1/html<span class="token punctuation">:</span>/usr/share/nginx/html  <span class="token comment" spellcheck="true"># nginx2</span>  <span class="token key atrule">nginx2</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx2    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> $<span class="token punctuation">{</span>PWD<span class="token punctuation">}</span>/nginx2/html<span class="token punctuation">:</span>/usr/share/nginx/html</code></pre><p>Traefik 配置文件<code>traefik.yml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># traefik.yml</span><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">checkNewVersion</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">sendAnonymousUsage</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">api</span><span class="token punctuation">:</span>  <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">log</span><span class="token punctuation">:</span>  <span class="token key atrule">filePath</span><span class="token punctuation">:</span> <span class="token string">"/var/log/traefik/log/traefik.log"</span>  <span class="token key atrule">format</span><span class="token punctuation">:</span> json<span class="token key atrule">accessLog</span><span class="token punctuation">:</span>  <span class="token key atrule">filePath</span><span class="token punctuation">:</span> <span class="token string">"/var/log/traefik/log/access.log"</span>  <span class="token key atrule">format</span><span class="token punctuation">:</span> json<span class="token key atrule">entryPoints</span><span class="token punctuation">:</span>  <span class="token key atrule">traefik</span><span class="token punctuation">:</span>    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token number">8080</span>  <span class="token key atrule">http</span><span class="token punctuation">:</span>    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token number">80</span>    <span class="token key atrule">forwardedHeaders</span><span class="token punctuation">:</span>      <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">proxyProtocol</span><span class="token punctuation">:</span>      <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">https</span><span class="token punctuation">:</span>    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token number">443</span>    <span class="token key atrule">forwardedHeaders</span><span class="token punctuation">:</span>      <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">proxyProtocol</span><span class="token punctuation">:</span>      <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">providers</span><span class="token punctuation">:</span>  <span class="token key atrule">providersThrottleDuration</span><span class="token punctuation">:</span> 2s  <span class="token key atrule">etcd</span><span class="token punctuation">:</span>    <span class="token key atrule">rootKey</span><span class="token punctuation">:</span> <span class="token string">"/traefik"</span>    <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"etcd:2379"</span></code></pre><p>这里我们为了展示 <code>traefik</code> 的负载均衡功能，启动两个<code>nginx</code>容器作为后端服务并且以<code>index.html</code>内容不同加以区分。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建 nginx 目录</span><span class="token function">mkdir</span> -p <span class="token punctuation">{</span>nginx1,nginx2<span class="token punctuation">}</span>/html<span class="token comment" spellcheck="true"># 编辑 index.html 静态页面</span><span class="token keyword">echo</span> <span class="token string">'&lt;h1>Hello nginx1&lt;/h1>'</span> <span class="token operator">></span> <span class="token variable">${PWD}</span>/nginx1/html/index.html<span class="token keyword">echo</span> <span class="token string">'&lt;h1>Hello nginx2&lt;/h1>'</span> <span class="token operator">></span> <span class="token variable">${PWD}</span>/nginx2/html/index.html</code></pre><p>etcd 持久化目录创建与添加权限</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p etcd/data <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> 777 etcd</code></pre><p>启动容器</p><pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre><p>启动后状态如下：</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220603180122867.png"></p><p>这时我们可以访问<code>127.0.0.1:8080</code> 就可以看到 traefik 的管理页面</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220603180331115.png"></p><p>当一切准备就绪后，我们就可以向 <code>etcd</code> 添加配置使 <code>traefik</code> 反向代理到后端 <code>nginx</code> 容器上</p><h4 id="etcd-添加配置数据"><a href="#etcd-添加配置数据" class="headerlink" title="etcd 添加配置数据"></a>etcd 添加配置数据</h4><pre class=" language-bash"><code class="language-bash">etcdctl put /traefik/enable <span class="token boolean">true</span>etcdctl put /traefik/http/middlewares/gzip/compress <span class="token boolean">true</span>etcdctl put /traefik/http/routers/nginx-web/entrypoints/0 httpetcdctl put /traefik/http/routers/nginx-web/rule <span class="token string">'Host(<span class="token variable"><span class="token variable">`</span>nginx.aptxhb.xyz<span class="token variable">`</span></span>) || PathPrefix(<span class="token variable"><span class="token variable">`</span>/<span class="token variable">`</span></span>)'</span>etcdctl put /traefik/http/routers/nginx-web/service nginx-web-lbetcdctl put /traefik/http/services/nginx-web-lb/loadbalancer/servers/1/url http://nginx1:80etcdctl put /traefik/http/services/nginx-web-lb/loadbalancer/servers/2/url http://nginx2:80</code></pre><p>这时我们可以看到 traefik 管理页面已经有刚才添加的路由，证明 <code>traefik</code> 自动发现配置且支持热加载</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220604015410972.png"></p><p>我们对域名绑定本地 <code>hosts</code> 解析后就可以在浏览器访问，并且尝试刷新可以看到请求在两个后端容器上轮询</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220604015850012.png"></p><h4 id="重定向-HTTPS"><a href="#重定向-HTTPS" class="headerlink" title="重定向 HTTPS"></a>重定向 HTTPS</h4><h5 id="制作证书"><a href="#制作证书" class="headerlink" title="制作证书"></a>制作证书</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建 ssl 目录</span><span class="token function">mkdir</span> ssl <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> ssl<span class="token comment" spellcheck="true"># 生成私钥</span>openssl genrsa -des3 -out nginx.aptxhb.xyz.key 2048<span class="token comment" spellcheck="true"># 生成CA证书</span>openssl req -new -key nginx.aptxhb.xyz.key -out ca.csr<span class="token comment" spellcheck="true"># 去除私钥密码</span>openssl rsa -in nginx.aptxhb.xyz.key -out nginx.aptxhb.xyz.key<span class="token comment" spellcheck="true"># 签发公钥</span>openssl x509 -req -days 3650 -in ca.csr -signkey nginx.aptxhb.xyz.key -out nginx.aptxhb.xyz.crt<span class="token comment" spellcheck="true"># 生成PEM格式公钥</span>openssl x509 -in nginx.aptxhb.xyz.crt -out nginx.aptxhb.xyz.pem -outform PEM</code></pre><p>修改 <code>docker-compose.yaml</code>  traefik 服务把证书挂载至容器 <code>/data/ssl</code> 目录</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> $<span class="token punctuation">{</span>PWD<span class="token punctuation">}</span>/traefik/ssl<span class="token punctuation">:</span>/data/ssl<span class="token punctuation">:</span>ro</code></pre><p>使用 <code>docker-compose up --detach --build traefik</code>  单独加载修改过的服务</p><h4 id="etcd-添加-HTTPS-配置"><a href="#etcd-添加-HTTPS-配置" class="headerlink" title="etcd 添加 HTTPS 配置"></a>etcd 添加 HTTPS 配置</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 捕捉所有 hosts 重定向 https</span>etcdctl put /traefik/http/routers/https-redirect/entryPoints/0 httpetcdctl put /traefik/http/routers/https-redirect/rule <span class="token string">'HostRegexp(<span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>any:.*<span class="token punctuation">}</span><span class="token variable">`</span></span>)'</span>etcdctl put /traefik/http/routers/https-redirect/middlewares https-redirectetcdctl put /traefik/http/routers/https-redirect/service noopetcdctl put /traefik/http/services/noop/LoadBalancer/servers/url <span class="token string">""</span>etcdctl put /traefik/http/middlewares/https-redirect/redirectScheme/scheme httpsetcdctl put /traefik/tls/options/default/maxVersion VersionTLS12etcdctl put /traefik/tls/options/default/minVersion VersionTLS12etcdctl put /traefik/tls/certificates <span class="token string">'[    {        "certFile": "/data/ssl/nginx.aptxhb.xyz.crt"    },    {        "keyFile": "/data/ssl/nginx.aptxhb.xyz.key"    }]'</span><span class="token comment" spellcheck="true"># 对 nginx-web 路由开启 https</span>etcdctl put /traefik/http/routers/nginx-web/entrypoints/1 httpsetcdctl put /traefik/http/routers/nginx-web/tls <span class="token boolean">true</span></code></pre><p>想要了解更多关于 <code>traefik</code>  的重定向知识请参考 <a href="https://github.com/traefik/traefik/issues/4863">traefik HTTP to HTTPS</a></p><p>我们可以从 <code>traefik</code> 管理页面看到 <code>nginx-web</code> 路由已经开启了<code>https</code>，并且绑定了 <code>tls证书</code></p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220604021528663.png"></p><p>现在我们继续在浏览器访问 <code>nginx.aptxhb.xyz</code> 域名已经正常跳转 https 访问了，由于是自签证书所以浏览器显示不安全的告警</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220604022114814.png"></p>]]></content>
      
      
      <categories>
          
          <category> traefik etcd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> traefik etcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables 内网访问外网配置</title>
      <link href="/2018/11/17/iptables-nei-wang-liu-liang-zhuan-fa/"/>
      <url>/2018/11/17/iptables-nei-wang-liu-liang-zhuan-fa/</url>
      
        <content type="html"><![CDATA[<p><strong>说明</strong>：由于业务某个支付服务需要苹果验证，但是服务器为了安全考虑都是内网机器无法访问公网。这里使用一台同网段且可以访问公网的机器做流量的转发</p><h4 id="iptables-工作流程"><a href="#iptables-工作流程" class="headerlink" title="iptables 工作流程"></a>iptables 工作流程</h4><p><strong>PREROUTEING</strong>  —&gt; 目的地址转换</p><p><strong>FORWARD</strong>         —&gt; 目的地址判断，本机 IP 则需经过防火墙，非本机 IP 则路由下发至 POSTROUTING 链</p><p><strong>POSTROUTING</strong> —&gt; 源地址转换</p><p>服务器a：192.168.0.1</p><p>服务器b：192.168.0.2（可访问公网）</p><h4 id="内网访问外网配置"><a href="#内网访问外网配置" class="headerlink" title="内网访问外网配置"></a>内网访问外网配置</h4><h5 id="iptables-安装"><a href="#iptables-安装" class="headerlink" title="iptables 安装"></a>iptables 安装</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装 iptables-services</span>yum -y <span class="token function">install</span> iptables-services<span class="token comment" spellcheck="true"># 清理 iptables 规则</span>iptables -F<span class="token comment" spellcheck="true"># 保存 iptables 规则</span>iptables-save <span class="token operator">></span> /etc/sysconfig/iptables<span class="token comment" spellcheck="true"># 启动 iptables 服务</span>systemctl <span class="token function">enable</span> iptables --now</code></pre><h5 id="iptables-配置流量转发"><a href="#iptables-配置流量转发" class="headerlink" title="iptables 配置流量转发"></a>iptables 配置流量转发</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 配置地址转发，如果目的地址、源地址是 192.168.0.0/16 的时候则直接转发路由不经过本机防火墙</span>iptables -A FORWARD -p tcp -d 192.168.0.0/16 -j ACCEPTiptables -A FORWARD -p tcp -d 192.168.0.0/16 -j ACCEPT<span class="token comment" spellcheck="true"># 当目的地址是 192.168.0.2 且端口是 443 时做 DNAT 转换,修改目的地址为 14.215.177.39</span>iptables -t nat -A PREROUTING -p tcp -i eth0 -d 172.23.0.15 --dport 443 -j DNAT --to-destination 14.215.177.39:443<span class="token comment" spellcheck="true"># 源地址欺骗，动态获取源地址 ip 进行修改</span>iptables -t nat -A POSTROUTING -p tcp -m tcp -s 192.168.0.0/16 -o eth0 -j MASQUERADE</code></pre>]]></content>
      
      
      <categories>
          
          <category> iptables </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTP时间同步</title>
      <link href="/2018/11/03/ntp-shi-jian-tong-bu/"/>
      <url>/2018/11/03/ntp-shi-jian-tong-bu/</url>
      
        <content type="html"><![CDATA[<h4 id="NTP时间同步"><a href="#NTP时间同步" class="headerlink" title="NTP时间同步"></a>NTP时间同步</h4><h5 id="一、定时任务同步时间"><a href="#一、定时任务同步时间" class="headerlink" title="一、定时任务同步时间"></a>一、定时任务同步时间</h5><ol><li>编辑同步时间任务</li></ol><pre><code>echo "*/3 * * * * ntpdate ntp.aliyun.com &amp;&gt; /dev/null" &gt; /tmp/crontab_ntpdate</code></pre><ol start="2"><li>添加定时任务</li></ol><pre><code>crontab /tmp/crontab_ntpdate</code></pre><ol start="3"><li>命令修改时区</li></ol><pre><code>timedatectl set-timezone Asia/Shanghai</code></pre><h5 id="二、chrony时间同步服务"><a href="#二、chrony时间同步服务" class="headerlink" title="二、chrony时间同步服务"></a>二、chrony时间同步服务</h5><ol><li>安装chronyd包</li></ol><pre><code># yum -y install chrony</code></pre><ol start="2"><li>修改chronyd服务配置文件</li></ol><pre><code># cat /etc/chrony.conf...server ntp1.aliyun.com iburst...makestep 1.0 3...rtcsync...allow 192.168.0.0/16...local stratum 10...logdir /var/log/chrony...</code></pre><ol start="3"><li>启动服务并设置开机自启</li></ol><pre><code># 启动服务前强制同步一次时间# chronyc -a makestep# 设置开机自启并启动# systemctl enable chronyd --now</code></pre><ol start="4"><li>检查时间同步服务状态</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost src<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chronyc sourcestats  # 查看时间同步服务器</span>210 Number of sources <span class="token operator">=</span> 1Name/IP Address            NP  NR  Span  Frequency  Freq Skew  Offset  Std Dev<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>120.25.115.20               9   5   398     +0.441      4.408    +13us   394us<span class="token punctuation">[</span>root@localhost src<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chronyc sources -v  # 查看时间同步状态</span>210 Number of sources <span class="token operator">=</span> 1  .-- Source mode  <span class="token string">'^'</span> <span class="token operator">=</span> server, <span class="token string">'='</span> <span class="token operator">=</span> peer, <span class="token string">'#'</span> <span class="token operator">=</span> local clock. / .- Source state <span class="token string">'*'</span> <span class="token operator">=</span> current synced, <span class="token string">'+'</span> <span class="token operator">=</span> combined , <span class="token string">'-'</span> <span class="token operator">=</span> not combined,<span class="token operator">|</span> /   <span class="token string">'?'</span> <span class="token operator">=</span> unreachable, <span class="token string">'x'</span> <span class="token operator">=</span> <span class="token function">time</span> may be <span class="token keyword">in</span> error, <span class="token string">'~'</span> <span class="token operator">=</span> <span class="token function">time</span> too variable.<span class="token operator">||</span>                                                 .- xxxx <span class="token punctuation">[</span> yyyy <span class="token punctuation">]</span> +/- zzzz<span class="token operator">||</span>      Reachability register <span class="token punctuation">(</span>octal<span class="token punctuation">)</span> -.           <span class="token operator">|</span>  xxxx <span class="token operator">=</span> adjusted offset,<span class="token operator">||</span>      Log2<span class="token punctuation">(</span>Polling interval<span class="token punctuation">)</span> --.      <span class="token operator">|</span>          <span class="token operator">|</span>  yyyy <span class="token operator">=</span> measured offset,<span class="token operator">||</span>                                \     <span class="token operator">|</span>          <span class="token operator">|</span>  zzzz <span class="token operator">=</span> estimated error.<span class="token operator">||</span>                                 <span class="token operator">|</span>    <span class="token operator">|</span>           \MS Name/IP address         Stratum Poll Reach LastRx Last sample               <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>^* 120.25.115.20                 2   6   357    38   +392us<span class="token punctuation">[</span> +632us<span class="token punctuation">]</span> +/- 5232us</code></pre>]]></content>
      
      
      <categories>
          
          <category> ntp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FAQ问题记录手册</title>
      <link href="/2018/11/03/faq-wen-ti-ji-lu-shou-ce/"/>
      <url>/2018/11/03/faq-wen-ti-ji-lu-shou-ce/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h4 id="1-Mac-m1-安装-Docker-Desktop-时弹窗无法安装"><a href="#1-Mac-m1-安装-Docker-Desktop-时弹窗无法安装" class="headerlink" title="1. Mac m1 安装 Docker Desktop 时弹窗无法安装"></a>1. Mac m1 安装 Docker Desktop 时弹窗无法安装</h4><pre><code># 清除以下两个目录文件，在重新启动rm -rf /Users/用户名/Library/Group\ Containers/group.com.dockerrm -rf /Users/用户名/.docker/</code></pre><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="2-docker登陆私有仓库http禁止自动跳转至https"><a href="#2-docker登陆私有仓库http禁止自动跳转至https" class="headerlink" title="2. docker登陆私有仓库http禁止自动跳转至https"></a>2. docker登陆私有仓库http禁止自动跳转至https</h4><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220513083750891.png" alt="image-20220513083750891"></p><p>编辑docker 配置文件 /etc/docker/daemon.json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://uwa9by0v.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> # 阿里云镜像加速  <span class="token property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"http://harbor.smarlife.cn:80"</span><span class="token punctuation">]</span>  # 私有仓库地址<span class="token punctuation">}</span></code></pre><p>重启docker </p><h4 id="3-Get-https-harbor-xxxxxx"><a href="#3-Get-https-harbor-xxxxxx" class="headerlink" title="3. Get https://harbor.xxxxxx"></a>3. Get <a href="https://harbor.xxxxxx/">https://harbor.xxxxxx</a></h4><p>.cn/v2/: x509: certificate signed by unknown authority</p><p>问题说明：我们在构建 docker 镜像时一般使用的是 linux 系统，默认是不带 ca-certficates 根证书的，导致无法识别外部 https 携带的数字证书。如图：</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20220513115435456.png" alt="image-20220513115435456"></p><p><strong>方法一：</strong></p><hr><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> -n <span class="token operator">|</span> openssl s_client -showcerts -connect harbor.smarlife.cn:443 2<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span>/dev/null <span class="token operator">|</span> <span class="token function">sed</span> -ne <span class="token string">'/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> /etc/ssl/certs/harbor.xxxxxx.cn.crt</code></pre><p>重启 docker</p><pre class=" language-bash"><code class="language-bash">systemctl daemon-reload <span class="token operator">&amp;&amp;</span> systemctl restart docker</code></pre><h4 id="4-Error-response-from-daemon-Get-https-harbor-xxxxxx-cn-v2-x509-certificate-has-expired-or-is-not-yet-valid"><a href="#4-Error-response-from-daemon-Get-https-harbor-xxxxxx-cn-v2-x509-certificate-has-expired-or-is-not-yet-valid" class="headerlink" title="4. Error response from daemon: Get https://harbor.xxxxxx.cn/v2/: x509: certificate has expired or is not yet valid"></a>4. Error response from daemon: Get <a href="https://harbor.xxxxxx.cn/v2/">https://harbor.xxxxxx.cn/v2/</a>: x509: certificate has expired or is not yet valid</h4><p>时间出现文件检查时间</p><h4 id="5-Error-response-from-daemon-Get-“https-registry-ops-com-5000-v2-quot-http-server-gave-HTTP-response-to-HTTPS-client"><a href="#5-Error-response-from-daemon-Get-“https-registry-ops-com-5000-v2-quot-http-server-gave-HTTP-response-to-HTTPS-client" class="headerlink" title="5. Error response from daemon: Get “https://registry.ops.com:5000/v2/&quot;: http: server gave HTTP response to HTTPS client"></a>5. Error response from daemon: Get “<a href="https://registry.ops.com:5000/v2/&quot;">https://registry.ops.com:5000/v2/"</a>: http: server gave HTTP response to HTTPS client</h4><p><strong>问题描述：</strong>推送私有仓库时自动跳转 HTTPS 协议，由于我的镜像仓库是 HTTP 协议所以被拒绝。如图所示：</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/20220516093201.png" alt="图1"></p><p>解决方式一：修改 docker 配置文件 daemon.json 指定私有仓库地址协议和端口</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/docker/daemon.json <span class="token punctuation">{</span>  <span class="token string">"insecure-registries"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"http://registry.ops.com:5000"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 加载配置</span>systemctl daemon-reload<span class="token comment" spellcheck="true"># 重启 docker</span>systemctl restart docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> FAQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FAQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Containerd二进制部署K8s</title>
      <link href="/2018/09/07/ji-yu-containerd-er-jin-zhi-bu-shu-k8s/"/>
      <url>/2018/09/07/ji-yu-containerd-er-jin-zhi-bu-shu-k8s/</url>
      
        <content type="html"><![CDATA[<p><strong>基于containerd二进制部署k8s</strong></p><p><strong>声明：</strong></p><p>因部署涉及多台主机期间重复操作过多各组件脚本与配置大致相同固只贴出一份作为参考，参数有异部分大多数为主机名与IP，部署期间注意修改为对应角色信息。操作命令前注意标识符<code>主机名</code>与<code>目录级别</code>，下面是标识符的书写规则。</p><p>例：[root@k8s-master4 ~]#</p><p>第一列：当前用户，隐藏为默认root操作</p><p>第二列：主机名，隐藏则为当前组件的规划主机都要执行，否则只操作当前主机</p><p>第三列：当前目录，注意切换对应目录级别在操作</p><p>示例一：<code>k8s-master4 opt]# pwd</code> 表示只在k8s-master4主机执行操作</p><p>示例二：<code>opt]# pwd</code> 表示安装组件的规划主机内都要执行此操作 如下图：keepalived组件只需在<code>k8s-master4</code>、<code>k8s-node4-1</code>节点上执行</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014093216431.png" alt="image-20211014093216431"></p><h5 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h5><table><thead><tr><th>主机名</th><th>IP</th><th>系统</th><th>资源</th><th>k8s-version</th><th>CRI</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>centos 7.8</td><td>2c4G</td><td>v1.17.16</td><td>containerd://1.5.5</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>centos 7.8</td><td>2c4G</td><td>v1.17.16</td><td>containerd://1.5.5</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>centos 7.8</td><td>2c4G</td><td>v1.17.16</td><td>containerd://1.5.5</td></tr></tbody></table><h6 id="系统版本："><a href="#系统版本：" class="headerlink" title="系统版本："></a>系统版本：</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># uname -a</span>Linux k8s-master4 3.10.0-1160.el7.x86_64 <span class="token comment" spellcheck="true">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre><h6 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名:"></a>设置主机名:</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># hostnamectl set-hostname k8s-master4</span><span class="token comment" spellcheck="true"># hostnamectl set-hostname k8s-node4-1</span><span class="token comment" spellcheck="true"># hostnamectl set-hostname k8s-node4-2</span></code></pre><h6 id="设置hosts本机解析："><a href="#设置hosts本机解析：" class="headerlink" title="设置hosts本机解析："></a>设置hosts本机解析：</h6><pre class=" language-shell"><code class="language-shell"># cat /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.92.155k8s-master4192.168.92.156k8s-node4-1192.168.92.157k8s-node4-2</code></pre><h6 id="关闭防火墙及selinux："><a href="#关闭防火墙及selinux：" class="headerlink" title="关闭防火墙及selinux："></a>关闭防火墙及selinux：</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># systemctl stop firewalld</span><span class="token comment" spellcheck="true"># systemctl disable firewalld</span><span class="token comment" spellcheck="true"># sed -e 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/config</span><span class="token comment" spellcheck="true"># setenforce 0</span></code></pre><h6 id="关闭swap分区："><a href="#关闭swap分区：" class="headerlink" title="关闭swap分区："></a>关闭swap分区：</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># swapoff -a</span><span class="token comment" spellcheck="true"># grep swap /etc/fstab</span><span class="token comment" spellcheck="true"># /dev/mapper/centos-swap swap                    swap    defaults        0 0  # 注释swap挂载分区</span></code></pre><h6 id="设置时间同步"><a href="#设置时间同步" class="headerlink" title="设置时间同步"></a>设置时间同步</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><span class="token comment" spellcheck="true"># yum -y install ntpdate</span><span class="token comment" spellcheck="true"># ntpdate ntp.aliyun.com</span><span class="token comment" spellcheck="true"># cat > /root/cron_file &lt;&lt; EOF</span>*/2 * * * * ntpdate ntp.aliyun.com <span class="token operator">&amp;</span><span class="token operator">></span> /dev/nullEOF<span class="token comment" spellcheck="true"># crontab /root/cron_file</span></code></pre><p><strong>注意：</strong>因为这是本地虚拟机没有安装时间同步服务，所以只用命令简单同步时间。生产环境不要按照此方法。</p><h6 id="开启内核模块"><a href="#开启内核模块" class="headerlink" title="开启内核模块"></a>开启内核模块</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/sysctl.d/k8s.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1vm.swappiness = 0EOF</span><span class="token function">cat</span> <span class="token operator">></span> ipvs.sh <span class="token operator">&lt;&lt;</span> <span class="token string">"EOF"#!/bin/bash/sbin/modprobe br_netfilter/sbin/modprobe -- nf_conntrack_ipv4ipvs_mods_dir="/usr/lib/modules/<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -r<span class="token variable">)</span></span>/kernel/net/netfilter/ipvs"for i in <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> $ipvs_mods_dir<span class="token operator">|</span><span class="token function">grep</span> -o "^<span class="token punctuation">[</span>^.<span class="token punctuation">]</span>*"<span class="token variable">)</span></span>do  /sbin/modinfo -F filename <span class="token variable">$i</span> &amp;>/dev/null  if [ <span class="token variable">$?</span> -eq 0 ];then    /sbin/modprobe <span class="token variable">$i</span>  fidoneEOF</span>sysctl -p /etc/sysctl.d/k8s.conf<span class="token function">chmod</span> +x ipvs.sh./ipvs.sh</code></pre><h4 id="一、自签k8s所需证书"><a href="#一、自签k8s所需证书" class="headerlink" title="一、自签k8s所需证书"></a>一、自签k8s所需证书</h4><p><strong>说明：</strong>证书只在管理节点生成，然后按节点角色拷贝证书秘钥至主机。注意秘钥的权限是<code>600</code>拷贝加上<code>-p</code>参数。</p><ol><li><h6 id="安装cfssl"><a href="#安装cfssl" class="headerlink" title="安装cfssl"></a>安装cfssl</h6></li></ol><p><a href="https://pkg.cfssl.org/R1.2/cfssl_linux-amd64">cfssl 下载地址</a></p><p><a href="https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64">cfssl-json 下载地址</a></p><p><a href="https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64">cfssl-certinfo 下载地址</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/local/sbin/cfssl<span class="token function">wget</span> https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/local/sbin/cfssl-json<span class="token function">wget</span> https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/local/sbin/cfssl-certinfo<span class="token function">chmod</span> +x /usr/local/sbin/cfssl*</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012113552567.png" alt="image-20211012113552567"></p><ol start="2"><li><h6 id="创建CA证书签名请求配置文件ca-csr-json"><a href="#创建CA证书签名请求配置文件ca-csr-json" class="headerlink" title="创建CA证书签名请求配置文件ca-csr.json"></a>创建CA证书签名请求配置文件<code>ca-csr.json</code></h6></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /opt/certs/<span class="token function">cat</span> <span class="token operator">></span> /opt/certs/ca-csr.json <span class="token operator">&lt;&lt;</span> <span class="token string">EOF{    "CN": "HuaCloud",    "hosts": [    ],    "key": {        "algo": "rsa",        "size": 2048    },    "names": [        {            "C": "CN",            "ST": "shenzhen",            "L": "shenzhen",            "O": "IT",            "OU": "ops"        }    ],    "ca": {        "expiry": "175200h"    }}EOF</span></code></pre><ul><li>CN：Common Name，浏览器使用该字段验证网站是否合法，一般写的是域名，非常重要。</li><li>C：Country。国家</li><li>ST：State，州，省</li><li>L：Locality，城区，城市</li><li>O：Organization Name，组织名称，公司名称</li><li>OU：Organization Unit Name。组织单位名称，公司部门</li></ul><ol start="3"><li><h6 id="生成CA证书和私钥"><a href="#生成CA证书和私钥" class="headerlink" title="生成CA证书和私钥"></a>生成CA证书和私钥</h6></li></ol><pre class=" language-bash"><code class="language-bash">cfssl gencert -initca ca-csr.json <span class="token operator">|</span> cfssl-json -bare call</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012114912559.png" alt="image-20211012114912559"></p><h5 id="签发-etcd-证书"><a href="#签发-etcd-证书" class="headerlink" title="签发 etcd 证书"></a>签发 etcd 证书</h5><ol><li><h6 id="创建基于根证书的配置文件"><a href="#创建基于根证书的配置文件" class="headerlink" title="创建基于根证书的配置文件"></a>创建基于根证书的配置文件</h6></li></ol><pre class=" language-json"><code class="language-json">cat > ca-config.json &lt;&lt; EOF<span class="token punctuation">{</span>    <span class="token property">"signing"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"default"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"expiry"</span><span class="token operator">:</span> <span class="token string">"175200h"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"profiles"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"server"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"expiry"</span><span class="token operator">:</span> <span class="token string">"175200h"</span><span class="token punctuation">,</span>                <span class="token property">"usages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"signing"</span><span class="token punctuation">,</span>                    <span class="token string">"key encipherment"</span><span class="token punctuation">,</span>                    <span class="token string">"server auth"</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"client"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"expiry"</span><span class="token operator">:</span> <span class="token string">"175200h"</span><span class="token punctuation">,</span>                <span class="token property">"usages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"signing"</span><span class="token punctuation">,</span>                    <span class="token string">"key encipherment"</span><span class="token punctuation">,</span>                    <span class="token string">"client auth"</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"peer"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"expiry"</span><span class="token operator">:</span> <span class="token string">"175200h"</span><span class="token punctuation">,</span>                <span class="token property">"usages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"signing"</span><span class="token punctuation">,</span>                    <span class="token string">"key encipherment"</span><span class="token punctuation">,</span>                    <span class="token string">"server auth"</span><span class="token punctuation">,</span>                    <span class="token string">"client auth"</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>EOF</code></pre><ul><li>client certificate：客户端使用，用于服务端认证客户端，例如etcdctl、etcd proxy、fleetctl、docker客户端</li><li>server certificate：服务器端使用，客户端已验证服务端身份，例如docker服务端、kube-apiserver</li><li>peer certificate：双向证书，用于etcd集群成员间通信</li></ul><ol start="2"><li><h6 id="创建证书签名请求的配置文件"><a href="#创建证书签名请求的配置文件" class="headerlink" title="创建证书签名请求的配置文件"></a>创建证书签名请求的配置文件</h6></li></ol><pre class=" language-json"><code class="language-json">cat > etcd-peer-csr.json &lt;&lt; EOF<span class="token punctuation">{</span>    <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"k8s-etcd"</span><span class="token punctuation">,</span>    <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"192.168.92.155"</span><span class="token punctuation">,</span>        <span class="token string">"192.168.92.156"</span><span class="token punctuation">,</span>        <span class="token string">"192.168.92.157"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>            <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"IT"</span><span class="token punctuation">,</span>            <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"ops"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF</code></pre><p><code>hosts</code>：etcd 节点有多少就对应修改</p><ol start="3"><li><h6 id="签发etcd证书和私钥"><a href="#签发etcd证书和私钥" class="headerlink" title="签发etcd证书和私钥"></a>签发etcd证书和私钥</h6></li></ol><pre class=" language-bash"><code class="language-bash">cfssl gencert -ca<span class="token operator">=</span>ca.pem -ca-key<span class="token operator">=</span>ca-key.pem -config<span class="token operator">=</span>ca-config.json -profile<span class="token operator">=</span>peer etcd-peer-csr.json<span class="token operator">|</span>cfssl-json -bare etcd-peer</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012120531731.png" alt="image-20211012120531731"></p><h5 id="签发-client-证书"><a href="#签发-client-证书" class="headerlink" title="签发 client 证书"></a>签发 client 证书</h5><ol><li><h6 id="创建证书签名请求的配置文件-1"><a href="#创建证书签名请求的配置文件-1" class="headerlink" title="创建证书签名请求的配置文件"></a>创建证书签名请求的配置文件</h6></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> client-csr.json <span class="token operator">&lt;&lt;</span> <span class="token string">EOF{    "CN": "k8s-node",    "hosts": [    ],    "key": {        "algo": "rsa",        "size": 2048    },    "names": [        {            "C": "CN",            "ST": "shenzhen",            "L": "shenzhen",            "O": "IT",            "OU": "ops"        }    ]}EOF</span></code></pre><ol start="2"><li><h6 id="签发client证书和私钥"><a href="#签发client证书和私钥" class="headerlink" title="签发client证书和私钥"></a>签发client证书和私钥</h6></li></ol><pre class=" language-bash"><code class="language-bash">cfssl gencert -ca<span class="token operator">=</span>ca.pem -ca-key<span class="token operator">=</span>ca-key.pem -config<span class="token operator">=</span>ca-config.json -profile<span class="token operator">=</span>client client-csr.json <span class="token operator">|</span>cfssl-json -bare client</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012122819509.png" alt="image-20211012122819509"></p><h5 id="签发-kube-apiserver-证书"><a href="#签发-kube-apiserver-证书" class="headerlink" title="签发 kube-apiserver 证书"></a>签发 kube-apiserver 证书</h5><ol><li><h6 id="创建证书请求配置文件"><a href="#创建证书请求配置文件" class="headerlink" title="创建证书请求配置文件"></a>创建证书请求配置文件</h6></li></ol><pre class=" language-json"><code class="language-json">cat > apiserver-csr.json &lt;&lt; EOF<span class="token punctuation">{</span>    <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"k8s-apiserver"</span><span class="token punctuation">,</span>    <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>        <span class="token string">"10.96.0.1"</span><span class="token punctuation">,</span>        <span class="token string">"kubernetes.default"</span><span class="token punctuation">,</span>        <span class="token string">"kubernetes.default.svc"</span><span class="token punctuation">,</span>        <span class="token string">"kubernetes.default.svc.cluster"</span><span class="token punctuation">,</span>        <span class="token string">"kubernetes.default.svc.cluster.local"</span><span class="token punctuation">,</span>        <span class="token string">"192.168.92.154"</span><span class="token punctuation">,</span> // vip        <span class="token string">"192.168.92.155"</span><span class="token punctuation">,</span>        <span class="token string">"192.168.92.156"</span><span class="token punctuation">,</span>        <span class="token string">"192.168.92.157"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>            <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"IT"</span><span class="token punctuation">,</span>            <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"ops"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF</code></pre><ol start="2"><li><h6 id="签发apiserver证书和私钥"><a href="#签发apiserver证书和私钥" class="headerlink" title="签发apiserver证书和私钥"></a>签发apiserver证书和私钥</h6></li></ol><pre class=" language-bash"><code class="language-bash">cfssl gencert -ca<span class="token operator">=</span>ca.pem -ca-key<span class="token operator">=</span>ca-key.pem -config<span class="token operator">=</span>ca-config.json -profile<span class="token operator">=</span>server apiserver-csr.json <span class="token operator">|</span>cfssl-json -bare apiserver</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012151403019.png" alt="image-20211012151403019"></p><h5 id="签发kubelet证书"><a href="#签发kubelet证书" class="headerlink" title="签发kubelet证书"></a>签发kubelet证书</h5><ol><li><h6 id="创建证书请求配置文件-1"><a href="#创建证书请求配置文件-1" class="headerlink" title="创建证书请求配置文件"></a>创建证书请求配置文件</h6></li></ol><pre class=" language-json"><code class="language-json">cat > kubelet-csr.json &lt;&lt; EOF<span class="token punctuation">{</span>    <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"k8s-kubelet"</span><span class="token punctuation">,</span>    <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    <span class="token string">"192.168.92.154"</span><span class="token punctuation">,</span> // vip    <span class="token string">"192.168.92.155"</span><span class="token punctuation">,</span>    <span class="token string">"192.168.92.156"</span><span class="token punctuation">,</span>    <span class="token string">"192.168.92.157"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>            <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"IT"</span><span class="token punctuation">,</span>            <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"ops"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF</code></pre><ol start="2"><li><h6 id="签发kubelet证书和私钥"><a href="#签发kubelet证书和私钥" class="headerlink" title="签发kubelet证书和私钥"></a>签发kubelet证书和私钥</h6></li></ol><pre class=" language-bash"><code class="language-bash">cfssl gencert -ca<span class="token operator">=</span>ca.pem -ca-key<span class="token operator">=</span>ca-key.pem -config<span class="token operator">=</span>ca-config.json -profile<span class="token operator">=</span>server kubelet-csr.json <span class="token operator">|</span> cfssl-json -bare kubelet</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012152028883.png" alt="image-20211012152028883"></p><h5 id="签发kube-proxy证书"><a href="#签发kube-proxy证书" class="headerlink" title="签发kube-proxy证书"></a>签发kube-proxy证书</h5><ol><li><h6 id="创建证书请求配置文件-2"><a href="#创建证书请求配置文件-2" class="headerlink" title="创建证书请求配置文件"></a>创建证书请求配置文件</h6></li></ol><pre class=" language-json"><code class="language-json">cat > kube-proxy-csr.json &lt;&lt; EOF<span class="token punctuation">{</span>    <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"system:kube-proxy"</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>            <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>            <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"IT"</span><span class="token punctuation">,</span>            <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"ops"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF</code></pre><ol start="2"><li><h6 id="签发kube-proxy证书和私钥"><a href="#签发kube-proxy证书和私钥" class="headerlink" title="签发kube-proxy证书和私钥"></a>签发kube-proxy证书和私钥</h6></li></ol><pre class=" language-bash"><code class="language-bash">cfssl gencert -ca<span class="token operator">=</span>ca.pem -ca-key<span class="token operator">=</span>ca-key.pem -config<span class="token operator">=</span>ca-config.json -profile<span class="token operator">=</span>client kube-proxy-csr.json <span class="token operator">|</span>cfssl-json -bare kube-proxy-client</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012152450818.png" alt="image-20211012152450818"></p><p>注意：这里的clent不能与其他的通用，上面CN变了，<code>"CN": "system:kube-proxy"</code></p><h5 id="签发metrics-server证书"><a href="#签发metrics-server证书" class="headerlink" title="签发metrics server证书"></a>签发metrics server证书</h5><ol><li><h6 id="创建metrics-server证书请求配置文件"><a href="#创建metrics-server证书请求配置文件" class="headerlink" title="创建metrics server证书请求配置文件"></a>创建metrics server证书请求配置文件</h6></li></ol><pre class=" language-json"><code class="language-json">cat > metrics-server-csr.json &lt;&lt; EOF<span class="token punctuation">{</span>  <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"system:kube-proxy"</span><span class="token punctuation">,</span>  <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>    <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>      <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>      <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span>      <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"metrics-proxy"</span><span class="token punctuation">,</span>      <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"IT"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span>EOF</code></pre><ol start="2"><li><h6 id="签发metrics-server证书和私钥"><a href="#签发metrics-server证书和私钥" class="headerlink" title="签发metrics server证书和私钥"></a>签发metrics server证书和私钥</h6></li></ol><pre class=" language-bash"><code class="language-bash">cfssl gencert -ca<span class="token operator">=</span>ca.pem -ca-key<span class="token operator">=</span>ca-key.pem -config<span class="token operator">=</span>ca-config.json -profile<span class="token operator">=</span>client metrics-server-csr.json  <span class="token operator">|</span> cfssl-json -bare metrics-proxy</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211012153211111.png" alt="image-20211012153211111"></p><h4 id="二、部署Contianerd"><a href="#二、部署Contianerd" class="headerlink" title="二、部署Contianerd"></a>二、部署Contianerd</h4><h5 id="1-部署containerd"><a href="#1-部署containerd" class="headerlink" title="1. 部署containerd"></a>1. 部署containerd</h5><h6 id="集群规划："><a href="#集群规划：" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机名</th><th>IP</th><th>版本</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>containerd://1.5.5</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>containerd://1.5.5</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>containerd://1.5.5</td></tr></tbody></table><h6 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h6><p><a href="https://github.com/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz">containerd 下载链接</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /opt/src <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> /opt/src<span class="token function">wget</span> https://github.com/containerd/containerd/releases/download/v1.5.5/cri-containerd-cni-1.5.5-linux-amd64.tar.gz</code></pre><h6 id="解压containerd软件包"><a href="#解压containerd软件包" class="headerlink" title="解压containerd软件包"></a>解压containerd软件包</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -xf cri-containerd-cni-1.5.5-linux-amd64.tar.gz -C /</code></pre><h6 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/containerdcontainerd config default <span class="token operator">></span> /etc/containerd/config.toml</code></pre><h6 id="修改配置config-toml"><a href="#修改配置config-toml" class="headerlink" title="修改配置config.toml"></a>修改配置config.toml</h6><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">..</span>.sandbox_image <span class="token operator">=</span> <span class="token string">"docker.io/kubernetes/pause:latest"</span><span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># conf_dir = "/etc/cni/net.d"</span><span class="token punctuation">..</span>.SystemdCgroup <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">..</span>.      <span class="token punctuation">[</span>plugins.<span class="token string">"io.containerd.grpc.v1.cri"</span>.registry.mirrors<span class="token punctuation">]</span>         <span class="token punctuation">[</span>plugins.<span class="token string">"io.containerd.grpc.v1.cri"</span>.registry.mirrors.<span class="token string">"docker.io"</span><span class="token punctuation">]</span>            endpoint <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"https://uwa9by0v.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span>plugins.<span class="token string">"io.containerd.grpc.v1.cri"</span>.registry.mirrors.<span class="token string">"k8s.gcr.io"</span><span class="token punctuation">]</span>            endpoint <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"http://registry.aliyuncs.com/k8sxio"</span><span class="token punctuation">]</span><span class="token punctuation">..</span>.</code></pre><p>以上是需要修改的内容</p><h6 id="启动并设置开机自启"><a href="#启动并设置开机自启" class="headerlink" title="启动并设置开机自启"></a>启动并设置开机自启</h6><pre class=" language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> containerd --now</code></pre><h4 id="三、部署主控节点组件"><a href="#三、部署主控节点组件" class="headerlink" title="三、部署主控节点组件"></a>三、部署主控节点组件</h4><h5 id="1-安装etcd集群"><a href="#1-安装etcd集群" class="headerlink" title="1. 安装etcd集群"></a>1. 安装etcd集群</h5><h6 id="集群规划：-1"><a href="#集群规划：-1" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机名</th><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>k8s-master4</td><td>etcd leader</td><td>192.168.92.155</td></tr><tr><td>k8s-node4-1</td><td>etcd foolow</td><td>192.168.92.156</td></tr><tr><td>k8s-node4-2</td><td>etcd foolow</td><td>192.168.92.157</td></tr></tbody></table><h6 id="下载软件、解压、做软连接："><a href="#下载软件、解压、做软连接：" class="headerlink" title="下载软件、解压、做软连接："></a>下载软件、解压、做软连接：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /opt/src <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> /opt/src<span class="token function">wget</span> https://github.com/etcd-io/etcd/releases/download/v3.1.20/etcd-v3.1.20-linux-amd64.tar.gz<span class="token function">tar</span> -xf etcd-v3.1.20-linux-amd64.tar.gz -C /opt/<span class="token function">cd</span> /opt/<span class="token function">mv</span> etcd-v3.1.20-linux-amd64/ etcd-v3.1.20<span class="token function">ln</span> -s /opt/etcd-v3.1.20/ /opt/etcdll</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013135838293.png" alt="image-20211013135838293"></p><h6 id="创建目录，拷贝证书、私钥："><a href="#创建目录，拷贝证书、私钥：" class="headerlink" title="创建目录，拷贝证书、私钥："></a>创建目录，拷贝证书、私钥：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> -s /sbin/nologin  -M etcd<span class="token function">mkdir</span> -p /opt/etcd/certs /data/etcd /data/logs/etcd-server<span class="token function">scp</span> -p /opt/certs/etcd-peer-key.pem 192.168.92.155:/opt/etcd/certs/<span class="token function">scp</span> -p /opt/certs/etcd-peer.pem  192.168.92.155:/opt/etcd/certs/<span class="token function">scp</span> -p /opt/certs/ca.pem 192.168.92.155:/opt/etcd/certs/<span class="token function">chown</span> -R etcd.etcd /opt/etcd/certs /data/etcd /data/logs/etcd-server</code></pre><h6 id="创建启动脚本："><a href="#创建启动脚本：" class="headerlink" title="创建启动脚本："></a>创建启动脚本：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/etcd/<span class="token function">cat</span> <span class="token operator">></span> etcd-server-startup.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/bin/sh./etcd --name etcd-server-155 \       --data-dir /data/etcd/etcd-server \       --listen-peer-urls https://192.168.92.155:2380 \       --listen-client-urls https://192.168.92.155:2379,http://127.0.0.1:2379 \       --quota-backend-bytes 8000000000 \       --initial-advertise-peer-urls https://192.168.92.155:2380 \       --advertise-client-urls https://192.168.92.155:2379,http://127.0.0.1:2379 \       --initial-cluster  etcd-server-155=https://192.168.92.155:2380,etcd-server-156=https://192.168.92.156:2380,etcd-server-157=https://192.168.92.157:2380 \       --ca-file ./certs/ca.pem \       --cert-file ./certs/etcd-peer.pem \       --key-file ./certs/etcd-peer-key.pem \       --client-cert-auth  \       --trusted-ca-file ./certs/ca.pem \       --peer-ca-file ./certs/ca.pem \       --peer-cert-file ./certs/etcd-peer.pem \       --peer-key-file ./certs/etcd-peer-key.pem \       --peer-client-cert-auth \       --peer-trusted-ca-file ./certs/ca.pem \       --log-output stdoutEOF</span><span class="token function">chmod</span> +x etcd-server-startup.sh</code></pre><p><strong>注意：</strong>修改对应参数，证书秘钥记得拷贝</p><h6 id="安装supervisor进程守护服务："><a href="#安装supervisor进程守护服务：" class="headerlink" title="安装supervisor进程守护服务："></a>安装supervisor进程守护服务：</h6><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> supervisorsystemctl <span class="token function">enable</span> supervisord --now</code></pre><h6 id="编辑etcd-server启动配置："><a href="#编辑etcd-server启动配置：" class="headerlink" title="编辑etcd-server启动配置："></a>编辑etcd-server启动配置：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/supervisord.d/etcd-server.ini <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[program:etcd-server]command=/opt/etcd/etcd-server-startup.sh                        ; the program (relative uses PATH, can take args)numprocs=1                                                      ; number of processes copies to start (def 1)directory=/opt/etcd                                             ; directory to cwd to before exec (def no cwd)autostart=true                                                  ; start at supervisord start (default: true)autorestart=true                                                ; retstart at unexpected quit (default: true)startsecs=30                                                    ; number of secs prog must stay running (def. 1)startretries=3                                                  ; max # of serial start failures (default 3)exitcodes=0,2                                                   ; 'expected' exit codes for process (default 0,2)stopsignal=QUIT                                                 ; signal used to kill process (default TERM)stopwaitsecs=10                                                 ; max num secs to wait b4 SIGKILL (default 10)user=etcd                                                       ; setuid to this UNIX account to run the programredirect_stderr=true                                            ; redirect proc stderr to stdout (default false)killasgroup=true                                                ; kill all process in a groupstopasgroup=true                                                ; stop all process in a groupstdout_logfile=/data/logs/etcd-server/etcd.stdout.log           ; stdout log path, NONE for none; default AUTOstdout_logfile_maxbytes=64MB                                    ; max # logfile bytes b4 rotation (default 50MB)stdout_logfile_backups=4                                        ; # of stdout logfile backups (default 10)stdout_capture_maxbytes=1MB                                     ; number of bytes in 'capturemode' (default 0)stdout_events_enabled=false                                     ; emit events on stdout writes (default false)EOF</span></code></pre><h6 id="启动etcd-server服务："><a href="#启动etcd-server服务：" class="headerlink" title="启动etcd-server服务："></a>启动etcd-server服务：</h6><pre class=" language-bash"><code class="language-bash">supervisorctl update<span class="token comment" spellcheck="true"># 检查服务状态</span>supervisorctl statusetcd-server                      RUNNING   pid 9587, <span class="token function">uptime</span> 0:01:03</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013144415527.png" alt="image-20211013144415527"></p><h6 id="检查etcd集群状态："><a href="#检查etcd集群状态：" class="headerlink" title="检查etcd集群状态："></a>检查etcd集群状态：</h6><pre class=" language-bash"><code class="language-bash">./etcdctl member list./etcdctl cluster-health</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013150240168.png" alt="image-20211013150240168"></p><h5 id="2-安装apiserver组件"><a href="#2-安装apiserver组件" class="headerlink" title="2. 安装apiserver组件"></a>2. 安装apiserver组件</h5><h6 id="集群规划：-2"><a href="#集群规划：-2" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>kube-apiserver</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>kube-apiserver</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>kube-apiserver</td></tr></tbody></table><h6 id="下载软件，解压，做软链："><a href="#下载软件，解压，做软链：" class="headerlink" title="下载软件，解压，做软链："></a>下载软件，解压，做软链：</h6><p><a href="https://github.com/kubernetes/kubernetes">kubernetes 下载链接</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/src<span class="token function">wget</span> https://dl.k8s.io/v1.17.16/kubernetes-server-linux-amd64.tar.gz<span class="token function">tar</span> -xf kubernetes-server-linux-amd64-v1.17.16.tar.gz -C /opt/<span class="token function">cd</span> /opt/<span class="token function">mv</span> kubernetes kubernetes-v1.17.16<span class="token function">ln</span> -s /opt/kubernetes-v1.17.16 /opt/kubernetes</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013155027768.png" alt="image-20211013155027768"></p><h6 id="整理kubernetes软件包："><a href="#整理kubernetes软件包：" class="headerlink" title="整理kubernetes软件包："></a>整理kubernetes软件包：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> kubernetes<span class="token function">rm</span> -f kubernetes-src.tar.gz<span class="token function">cd</span> server/bin/<span class="token function">rm</span> -f *_tag<span class="token function">rm</span> -f *.tarll</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013160222000.png" alt="image-20211013160222000"></p><h6 id="创建目录，拷贝证书、私钥：-1"><a href="#创建目录，拷贝证书、私钥：-1" class="headerlink" title="创建目录，拷贝证书、私钥："></a>创建目录，拷贝证书、私钥：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /data/logs/kubernetes/kube-apiserver ./certs ./conf<span class="token function">scp</span> -p /opt/certs/apiserver-key.pem /opt/certs/apiserver.pem /opt/certs/ca.pem /opt/certs/ca-key.pem  /opt/certs/client-key.pem  /opt/certs/client.pem /opt/certs/metrics-proxy-key.pem /opt/certs/metrics-proxy.pem 192.168.92.155:/opt/kubernetes/server/bin/certs/</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013162023543.png" alt="image-20211013162023543"></p><h6 id="编辑配置文件："><a href="#编辑配置文件：" class="headerlink" title="编辑配置文件："></a>编辑配置文件：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> conf/audit.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: audit.k8s.io/v1beta1 # This is required.kind: Policy# Don't generate audit events for all requests in RequestReceived stage.omitStages:  - "RequestReceived"rules:  # Log pod changes at RequestResponse level  - level: RequestResponse    resources:    - group: ""      # Resource "pods" doesn't match requests to any subresource of pods,      # which is consistent with the RBAC policy.      resources: ["pods"]  # Log "pods/log", "pods/status" at Metadata level  - level: Metadata    resources:    - group: ""      resources: ["pods/log", "pods/status"]  # Don't log requests to a configmap called "controller-leader"  - level: None    resources:    - group: ""      resources: ["configmaps"]      resourceNames: ["controller-leader"]  # Don't log watch requests by the "system:kube-proxy" on endpoints or services  - level: None    users: ["system:kube-proxy"]    verbs: ["watch"]    resources:    - group: "" # core API group      resources: ["endpoints", "services"]  # Don't log authenticated requests to certain non-resource URL paths.  - level: None    userGroups: ["system:authenticated"]    nonResourceURLs:    - "/api*" # Wildcard matching.    - "/version"  # Log the request body of configmap changes in kube-system.  - level: Request    resources:    - group: "" # core API group      resources: ["configmaps"]    # This rule only applies to resources in the "kube-system" namespace.    # The empty string "" can be used to select non-namespaced resources.    namespaces: ["kube-system"]  # Log configmap and secret changes in all other namespaces at the Metadata level.  - level: Metadata    resources:    - group: "" # core API group      resources: ["secrets", "configmaps"]  # Log all other resources in core and extensions at the Request level.  - level: Request    resources:    - group: "" # core API group    - group: "extensions" # Version of group should NOT be included.  # A catch-all rule to log all other requests at the Metadata level.  - level: Metadata    # Long-running requests like watches that fall under this rule will not    # generate an audit event in RequestReceived.    omitStages:      - "RequestReceived"EOF</span></code></pre><h6 id="编辑启动脚本："><a href="#编辑启动脚本：" class="headerlink" title="编辑启动脚本："></a>编辑启动脚本：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> kube-apiserver.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/bin/bash./kube-apiserver \  --apiserver-count 2 \  --audit-log-path /data/logs/kubernetes/kube-apiserver/audit-log \  --audit-policy-file ./conf/audit.yaml \  --authorization-mode RBAC \  --client-ca-file ./certs/ca.pem \  --requestheader-client-ca-file ./certs/ca.pem \  --enable-admission-plugins NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota \  --etcd-cafile ./certs/ca.pem \  --etcd-certfile ./certs/client.pem \  --etcd-keyfile ./certs/client-key.pem \  --etcd-servers https://192.168.92.155:2379,https://192.168.92.156:2379,https://192.168.92.157:2379 \  --service-account-key-file ./certs/ca-key.pem \  --service-cluster-ip-range 10.96.0.0/22 \  --service-node-port-range 3000-29999 \  --target-ram-mb=1024 \  --kubelet-client-certificate ./certs/client.pem \  --kubelet-client-key ./certs/client-key.pem \  --log-dir  /data/logs/kubernetes/kube-apiserver \  --tls-cert-file ./certs/apiserver.pem \  --tls-private-key-file ./certs/apiserver-key.pem \  --proxy-client-cert-file ./certs/metrics-proxy.pem \  --proxy-client-key-file ./certs/metrics-proxy-key.pem \  --requestheader-client-ca-file ./certs/ca.pem \  --requestheader-allowed-names= \  --requestheader-extra-headers-prefix=X-Remote-Extra- \  --requestheader-group-headers=X-Remote-Group \  --requestheader-username-headers=X-Remote-User \  --v 2EOF</span></code></pre><h6 id="编辑kube-apiserver启动配置："><a href="#编辑kube-apiserver启动配置：" class="headerlink" title="编辑kube-apiserver启动配置："></a>编辑kube-apiserver启动配置：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/supervisord.d/kube-apiserver.ini <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[program:kube-apiserver]command=/opt/kubernetes/server/bin/kube-apiserver.shnumprocs=1directory=/opt/kubernetes/server/binautostart=trueautorestart=truestartsecs=30startretries=3exitcodes=0,2stopsignal=QUITstopwaitsecs=10user=rootredirect_stderr=truekillasgroup=truestopasgroup=truestdout_logfile=/data/logs/kubernetes/kube-apiserver/apiserver.stdout.logstdout_logfile_maxbytes=64MBstdout_logfile_backups=4stdout_capture_maxbytes=1MBstdout_events_enabled=falseEOF</span></code></pre><h6 id="启动kube-apiserver并检查："><a href="#启动kube-apiserver并检查：" class="headerlink" title="启动kube-apiserver并检查："></a>启动kube-apiserver并检查：</h6><pre class=" language-bash"><code class="language-bash">supervisorctl updatesupervisorctl statusss -nutlp <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token string">"8080|6443"</span></code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013163102110.png" alt="image-20211013163102110"></p><p><strong>注意：</strong>其他节点修改对应参数并启动</p><h5 id="3-配置nginx四层反向代理"><a href="#3-配置nginx四层反向代理" class="headerlink" title="3. 配置nginx四层反向代理"></a>3. 配置nginx四层反向代理</h5><h6 id="集群规划：-3"><a href="#集群规划：-3" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>版本</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>1.20.1</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>1.20.1</td></tr></tbody></table><h6 id="软件安装："><a href="#软件安装：" class="headerlink" title="软件安装："></a>软件安装：</h6><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> nginx nginx-mod-streamsystemctl <span class="token function">enable</span> nginx --now</code></pre><h6 id="编辑配置文件-x2F-etc-x2F-nginx-x2F-nginx-conf："><a href="#编辑配置文件-x2F-etc-x2F-nginx-x2F-nginx-conf：" class="headerlink" title="编辑配置文件/etc/nginx/nginx.conf："></a>编辑配置文件/etc/nginx/nginx.conf：</h6><p>新增以下配置</p><pre class=" language-bash"><code class="language-bash">stream <span class="token punctuation">{</span>    upstream kube-apiserver <span class="token punctuation">{</span>        server 192.168.92.155:6443     max_fails<span class="token operator">=</span>3 fail_timeout<span class="token operator">=</span>30s<span class="token punctuation">;</span>        server 192.168.92.156:6443     max_fails<span class="token operator">=</span>3 fail_timeout<span class="token operator">=</span>30s<span class="token punctuation">;</span>        server 192.168.92.157:6443     max_fails<span class="token operator">=</span>3 fail_timeout<span class="token operator">=</span>30s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    server <span class="token punctuation">{</span>        listen 7443<span class="token punctuation">;</span>        proxy_connect_timeout 2s<span class="token punctuation">;</span>        proxy_timeout 900s<span class="token punctuation">;</span>        proxy_pass kube-apiserver<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意：</strong><code>stream</code>模块与<code>http</code>模块同级，所以<code>stream</code>模块配置不能编写入<code>http</code>模块中。</p><h6 id="启动并设置开机自启-1"><a href="#启动并设置开机自启-1" class="headerlink" title="启动并设置开机自启"></a>启动并设置开机自启</h6><pre class=" language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> nginx --now</code></pre><p><strong>注意：</strong>这里以k8s-master4主机为例，另一台k8s-node4-1需要相同操作</p><h5 id="4-安装keepalived负载均衡"><a href="#4-安装keepalived负载均衡" class="headerlink" title="4. 安装keepalived负载均衡"></a>4. 安装keepalived负载均衡</h5><h6 id="集群规划：-4"><a href="#集群规划：-4" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机名</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>master</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>backup</td></tr></tbody></table><p>VIP：192.168.92.154</p><h6 id="安装keepalived服务："><a href="#安装keepalived服务：" class="headerlink" title="安装keepalived服务："></a>安装keepalived服务：</h6><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> keepalived -y</code></pre><h6 id="编辑检查脚本："><a href="#编辑检查脚本：" class="headerlink" title="编辑检查脚本："></a>编辑检查脚本：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/keepalived/check_port.sh <span class="token operator">&lt;&lt;</span> <span class="token string">"EOF"#!/bin/bashCHK_PORT=<span class="token variable">$1</span>if [ -n "<span class="token variable">$CHK_PORT</span>" ];then        PORT_PROCESS=<span class="token variable"><span class="token variable">`</span><span class="token function">netstat</span> -nutlp<span class="token operator">|</span><span class="token function">grep</span> $CHK_PORT<span class="token operator">|</span><span class="token function">wc</span> -l<span class="token variable">`</span></span>        if [ <span class="token variable">$PORT_PROCESS</span> -eq 0 ];then                echo "Port <span class="token variable">$CHK_PORT</span> Is Not Used,End."                exit 1        fielse        echo "Check Port Cant Be Empty!"fiEOF</span></code></pre><h6 id="添加执行权限并测试脚本："><a href="#添加执行权限并测试脚本：" class="headerlink" title="添加执行权限并测试脚本："></a>添加执行权限并测试脚本：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x /etc/keepalived/check_port.sh/etc/keepalived/check_port.sh/etc/keepalived/check_port.sh 25452/etc/keepalived/check_port.sh 8080/etc/keepalived/check_port.sh 7443</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013174227949.png" alt="image-20211013174227949"></p><p>**PS:**无输出证明端口存活</p><h6 id="编辑keepalived配置文件："><a href="#编辑keepalived配置文件：" class="headerlink" title="编辑keepalived配置文件："></a>编辑keepalived配置文件：</h6><p><strong>注意：</strong>这里两台服务器keepalived配置略有不同，在下面分别贴出</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># k8s-master4主机keepalived配置如下：</span><span class="token function">cat</span> <span class="token operator">></span> /etc/keepalived/keepalived.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFglobal_defs {   router_id 192.168.92.155}vrrp_script chk_nginx {    script "/etc/keepalived/check_port.sh 7443"    interval 2    weight -20}vrrp_instance VI_1 {    state MASTER    interface ens32    virtual_router_id 251    priority 100    advert_int 1    mcast_src_ip 192.168.92.155    nopreempt    authentication {        auth_type PASS        auth_pass 12345678    }    track_script {         chk_nginx    }    virtual_ipaddress {        192.168.92.154    }}EOF</span><span class="token comment" spellcheck="true"># k8s-node4-1主机keepalived配置如下：</span><span class="token function">cat</span> <span class="token operator">></span> /etc/keepalived/keepalived.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFglobal_defs {    router_id 192.168.92.156}vrrp_script chk_nginx {    script "/etc/keepalived/check_port.sh 7443"    interval 2    weight -20}vrrp_instance VI_1 {    state BACKUP    interface ens32    virtual_router_id 251    mcast_src_ip 192.168.92.156    priority 90    advert_int 1    authentication {        auth_type PASS        auth_pass 12345678    }    track_script {        chk_nginx    }    virtual_ipaddress {        192.168.92.154    }}EOF</span></code></pre><h6 id="启动keepalived服务："><a href="#启动keepalived服务：" class="headerlink" title="启动keepalived服务："></a>启动keepalived服务：</h6><pre class=" language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> keepalived --now</code></pre><h6 id="检查keepalived服务："><a href="#检查keepalived服务：" class="headerlink" title="检查keepalived服务："></a>检查keepalived服务：<img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211013184735757.png" alt="image-20211013184735757"></h6><h5 id="5-安装kube-controller-manager组件"><a href="#5-安装kube-controller-manager组件" class="headerlink" title="5. 安装kube-controller-manager组件"></a>5. 安装kube-controller-manager组件</h5><h6 id="集群规划：-5"><a href="#集群规划：-5" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>kube-controller-manager</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>kube-controller-manager</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>kube-controller-manager</td></tr></tbody></table><h6 id="编辑启动脚本：-1"><a href="#编辑启动脚本：-1" class="headerlink" title="编辑启动脚本："></a>编辑启动脚本：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/kubernetes/server/bin/<span class="token function">cat</span> <span class="token operator">></span> kube-controller-manager.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/bin/sh./kube-controller-manager \  --cluster-cidr 172.92.0.0/16 \  --leader-elect true \  --log-dir /data/logs/kubernetes/kube-controller-manager \  --master http://127.0.0.1:8080 \  --service-account-private-key-file ./certs/ca-key.pem \  --service-cluster-ip-range 10.96.0.0/22 \  --root-ca-file ./certs/ca.pem \  --v 2EOF</span></code></pre><h6 id="编辑supervisor配置文件："><a href="#编辑supervisor配置文件：" class="headerlink" title="编辑supervisor配置文件："></a>编辑supervisor配置文件：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/supervisord.d/kube-controller-manager.ini <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[program:kube-controller-manager]command=/opt/kubernetes/server/bin/kube-controller-manager.shnumprocs=1directory=/opt/kubernetes/server/binautostart=trueautorestart=truestartsecs=30startretries=3exitcodes=0,2stopsignal=QUITstopwaitsecs=10user=rootredirect_stderr=truekillasgroup=truestopasgroup=truestdout_logfile=/data/logs/kubernetes/kube-controller-manager/controller.stdout.logstdout_logfile_maxbytes=64MBstdout_logfile_backups=4stdout_capture_maxbytes=1MBstdout_events_enabled=falseEOF</span></code></pre><h6 id="创建目录与添加执行权限："><a href="#创建目录与添加执行权限：" class="headerlink" title="创建目录与添加执行权限："></a>创建目录与添加执行权限：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /data/logs/kubernetes/kube-controller-manager<span class="token function">chmod</span> +x ./kube-controller-manager.sh</code></pre><h6 id="启动与检查："><a href="#启动与检查：" class="headerlink" title="启动与检查："></a>启动与检查：</h6><pre class=" language-bash"><code class="language-bash">supervisorctl updatesupervisorctl status</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014075502807.png" alt="image-20211014075502807"></p><h5 id="6-安装kube-scheduler组件"><a href="#6-安装kube-scheduler组件" class="headerlink" title="6. 安装kube-scheduler组件"></a>6. 安装kube-scheduler组件</h5><h6 id="集群规划：-6"><a href="#集群规划：-6" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>kube-scheduler</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>kube-scheduler</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>kube-scheduler</td></tr></tbody></table><h6 id="编辑启动脚本：-2"><a href="#编辑启动脚本：-2" class="headerlink" title="编辑启动脚本："></a>编辑启动脚本：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> kube-scheduler.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/bin/sh./kube-scheduler \  --leader-elect  \  --log-dir /data/logs/kubernetes/kube-scheduler \  --master http://127.0.0.1:8080 \  --v 2EOF</span></code></pre><h6 id="编辑supervisor管理配置："><a href="#编辑supervisor管理配置：" class="headerlink" title="编辑supervisor管理配置："></a>编辑supervisor管理配置：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/supervisord.d/kube-scheduler.ini <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[program:kube-scheduler]command=/opt/kubernetes/server/bin/kube-scheduler.shnumprocs=1directory=/opt/kubernetes/server/binautostart=trueautorestart=truestartsecs=30startretries=3exitcodes=0,2stopsignal=QUITstopwaitsecs=10user=rootredirect_stderr=truekillasgroup=truestopasgroup=truestdout_logfile=/data/logs/kubernetes/kube-scheduler/scheduler.stdout.logstdout_logfile_maxbytes=64MBstdout_logfile_backups=4stdout_capture_maxbytes=1MBstdout_events_enabled=falseEOF</span></code></pre><h6 id="创建目录与添加执行权限：-1"><a href="#创建目录与添加执行权限：-1" class="headerlink" title="创建目录与添加执行权限："></a>创建目录与添加执行权限：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /data/logs/kubernetes/kube-scheduler<span class="token function">chmod</span> +x ./kube-scheduler.sh</code></pre><h6 id="启动与检查：-1"><a href="#启动与检查：-1" class="headerlink" title="启动与检查："></a>启动与检查：</h6><pre class=" language-bash"><code class="language-bash">supervisorctl updatesupervisorctl status</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014080834445.png" alt="image-20211014080834445"></p><h5 id="7-主控节点环境检查"><a href="#7-主控节点环境检查" class="headerlink" title="7. 主控节点环境检查"></a>7. 主控节点环境检查</h5><h6 id="环境检查："><a href="#环境检查：" class="headerlink" title="环境检查："></a>环境检查：</h6><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> bash-completion -ykubectl completion <span class="token function">bash</span> <span class="token operator">></span> /etc/bash_completion.d/kubeletkubectl get cs</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014081827976.png" alt="image-20211014081827976"></p><p>如图：各组件状态Healthy则为正常，下面安装运算节点组件</p><h4 id="三、部署运算节点"><a href="#三、部署运算节点" class="headerlink" title="三、部署运算节点"></a>三、部署运算节点</h4><h5 id="1-安装kubelet组件"><a href="#1-安装kubelet组件" class="headerlink" title="1. 安装kubelet组件"></a>1. 安装kubelet组件</h5><h6 id="集群规划：-7"><a href="#集群规划：-7" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>kube-kubelet</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>kube-kubelet</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>kube-kubelet</td></tr></tbody></table><h6 id="配置用户context文件："><a href="#配置用户context文件：" class="headerlink" title="配置用户context文件："></a>配置用户context文件：</h6><pre class=" language-bash"><code class="language-bash">kubectl config set-cluster myk8s \  --certificate-authority<span class="token operator">=</span><span class="token punctuation">..</span>/certs/ca.pem \  --embed-certs<span class="token operator">=</span>true \  --server<span class="token operator">=</span>https://192.168.92.154:7443 \  --kubeconfig<span class="token operator">=</span>kubelet.kubeconfigkubectl config set-credentials k8s-node \  --client-certificate<span class="token operator">=</span><span class="token punctuation">..</span>/certs/client.pem \  --client-key<span class="token operator">=</span><span class="token punctuation">..</span>/certs/client-key.pem \  --embed-certs<span class="token operator">=</span>true \  --kubeconfig<span class="token operator">=</span>kubelet.kubeconfigkubectl config set-context myk8s-context \  --cluster<span class="token operator">=</span>myk8s \  --user<span class="token operator">=</span>k8s-node \  --kubeconfig<span class="token operator">=</span>kubelet.kubeconfigkubectl config use-context myk8s-context --kubeconfig<span class="token operator">=</span>kubelet.kubeconfig</code></pre><h6 id="编辑RBAC权限文件："><a href="#编辑RBAC权限文件：" class="headerlink" title="编辑RBAC权限文件："></a>编辑RBAC权限文件：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> k8s-node.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: k8s-noderoleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:- apiGroup: rbac.authorization.k8s.io  kind: User  name: k8s-nodeEOF</span></code></pre><h6 id="执行RBAC文件："><a href="#执行RBAC文件：" class="headerlink" title="执行RBAC文件："></a>执行RBAC文件：</h6><pre class=" language-bash"><code class="language-bash">kubectl create -f k8s-node.yaml</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211015100027389.png" alt="image-20211015100027389"></p><p><strong>注意：</strong>这里绑定的<code>ClusterRole</code>是<code>cluster-admin</code>权限为最高建议</p><h6 id="上传文件与证书、秘钥到其他节点："><a href="#上传文件与证书、秘钥到其他节点：" class="headerlink" title="上传文件与证书、秘钥到其他节点："></a>上传文件与证书、秘钥到其他节点：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> -p kubelet.kubeconfig k8s-node.yaml 192.168.92.156:/opt/kubernetes/server/bin/conf/<span class="token function">scp</span> -p kubelet.kubeconfig k8s-node.yaml 192.168.92.157:/opt/kubernetes/server/bin/conf/<span class="token function">cp</span> -p /opt/certs/kubelet.pem /opt/certs/kubelet-key.pem <span class="token punctuation">..</span>/certs/<span class="token function">scp</span> -p /opt/certs/kubelet.pem /opt/certs/kubelet-key.pem 192.168.92.156:/opt/kubernetes/server/bin/certs/<span class="token function">scp</span> -p /opt/certs/kubelet.pem /opt/certs/kubelet-key.pem 192.168.92.157:/opt/kubernetes/server/bin/certs/</code></pre><h6 id="编辑启动脚本与配置："><a href="#编辑启动脚本与配置：" class="headerlink" title="编辑启动脚本与配置："></a>编辑启动脚本与配置：</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># kubelet配置文件kubelet.yaml</span><span class="token function">cat</span> <span class="token operator">></span> kubelet.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: kubelet.config.k8s.io/v1beta1kind: KubeletConfigurationcgroupDriver: systemdclusterDNS:- 10.96.0.2clusterDomain: cluster.localEOF</span><span class="token comment" spellcheck="true"># kubelet启动脚本kubelet.sh</span><span class="token function">cat</span> <span class="token operator">></span> <span class="token punctuation">..</span>/kubelet.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/bin/sh./kubelet \  --anonymous-auth=false \  --bootstrap-kubeconfig=./conf/bootstrap-kubelet.conf \  --kubeconfig=./conf/kubelet.kubeconfig \  --config=./conf/kubelet.yaml \  --fail-swap-on="false" \  --client-ca-file ./certs/ca.pem \  --tls-cert-file ./certs/kubelet.pem \  --tls-private-key-file ./certs/kubelet-key.pem \  --container-runtime=remote \  --container-runtime-endpoint=/run/containerd/containerd.sock \  --pod-infra-container-image=docker.io/kubernetes/pause:latest \  --hostname-override k8s-master4 \  --image-gc-high-threshold 20 \  --image-gc-low-threshold 10 \  --log-dir /data/logs/kubernetes/kube-kubelet \  --root-dir /data/kubeletEOF</span></code></pre><h6 id="编辑supervisor管理配置：-1"><a href="#编辑supervisor管理配置：-1" class="headerlink" title="编辑supervisor管理配置："></a>编辑supervisor管理配置：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/supervisord.d/kube-kubelet.ini <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[program:kube-kubelet]command=/opt/kubernetes/server/bin/kubelet.sh     ; the program (relative uses PATH, can take args)numprocs=1                                        ; number of processes copies to start (def 1)directory=/opt/kubernetes/server/bin              ; directory to cwd to before exec (def no cwd)autostart=true                                    ; start at supervisord start (default: true)autorestart=true                                ; retstart at unexpected quit (default: true)startsecs=30                                      ; number of secs prog must stay running (def. 1)startretries=3                                    ; max # of serial start failures (default 3)exitcodes=0,2                                     ; 'expected' exit codes for process (default 0,2)stopsignal=QUIT                                   ; signal used to kill process (default TERM)stopwaitsecs=10                                   ; max num secs to wait b4 SIGKILL (default 10)user=root                                         ; setuid to this UNIX account to run the programredirect_stderr=true                              ; redirect proc stderr to stdout (default false)killasgroup=true                                  ; kill all process in a groupstopasgroup=true                                  ; stop all process in a groupstdout_logfile=/data/logs/kubernetes/kube-kubelet/kubelet.stdout.log   ; stderr log path, NONE for none; default AUTOstdout_logfile_maxbytes=64MB                      ; max # logfile bytes b4 rotation (default 50MB)stdout_logfile_backups=4                          ; # of stdout logfile backups (default 10)stdout_capture_maxbytes=1MB                       ; number of bytes in 'capturemode' (default 0)stdout_events_enabled=false                       ; emit events on stdout writes (default false)EOF</span></code></pre><h6 id="创建目录添加执行权限："><a href="#创建目录添加执行权限：" class="headerlink" title="创建目录添加执行权限："></a>创建目录添加执行权限：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x <span class="token punctuation">..</span>/kubelet.sh<span class="token function">mkdir</span> -p /data/logs/kubernetes/kube-kubelet /data/kubelet</code></pre><h6 id="启动并检查："><a href="#启动并检查：" class="headerlink" title="启动并检查："></a>启动并检查：</h6><pre class=" language-bash"><code class="language-bash">supervisorctl updatesupervisorctl status<span class="token function">tail</span> -fn20 /data/logs/kubernetes/kube-kubelet/kubelet.stdout.log</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014095028549.png" alt="image-20211014095028549"></p><p>因没开启健康检查参数与指定端点，日志中有健康检查错误可以忽略。</p><pre class=" language-bash"><code class="language-bash">kubectl get nodes -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014095503004.png" alt="image-20211014095503004"></p><h5 id="2-安装kube-proxy组件"><a href="#2-安装kube-proxy组件" class="headerlink" title="2. 安装kube-proxy组件"></a>2. 安装kube-proxy组件</h5><h6 id="集群规划：-8"><a href="#集群规划：-8" class="headerlink" title="集群规划："></a>集群规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>kube-proxy</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>kube-proxy</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>kube-proxy</td></tr></tbody></table><h6 id="软件包安装与模块检查："><a href="#软件包安装与模块检查：" class="headerlink" title="软件包安装与模块检查："></a>软件包安装与模块检查：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/kubernetes/server/bin/yum -y <span class="token function">install</span> ipset ipvsadmlsmod <span class="token operator">|</span> <span class="token function">grep</span> ip_vs</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014101045857.png" alt="image-20211014101045857"></p><h6 id="创建目录与拷贝证书、秘钥："><a href="#创建目录与拷贝证书、秘钥：" class="headerlink" title="创建目录与拷贝证书、秘钥："></a>创建目录与拷贝证书、秘钥：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /data/logs/kubernetes/kube-proxy<span class="token function">cp</span> -p /opt/certs/kube-proxy-client-key.pem /opt/certs/kube-proxy-client.pem ./certs/<span class="token function">scp</span> -p /opt/certs/kube-proxy-client-key.pem /opt/certs/kube-proxy-client.pem 192.168.92.157:/opt/kubernetes/server/bin/certs/<span class="token function">scp</span> -p /opt/certs/kube-proxy-client-key.pem /opt/certs/kube-proxy-client.pem 192.168.92.157:/opt/kubernetes/server/bin/certs/</code></pre><h6 id="创建资源文件并拷贝至其他节点："><a href="#创建资源文件并拷贝至其他节点：" class="headerlink" title="创建资源文件并拷贝至其他节点："></a>创建资源文件并拷贝至其他节点：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/kubernetes/server/bin/conf/kubectl config set-cluster myk8s \  --certificate-authority<span class="token operator">=</span><span class="token punctuation">..</span>/certs/ca.pem \  --embed-certs<span class="token operator">=</span>true \  --server<span class="token operator">=</span>https://192.168.92.154:7443 \  --kubeconfig<span class="token operator">=</span>kube-proxy.kubeconfigkubectl config set-credentials kube-proxy \  --client-certificate<span class="token operator">=</span><span class="token punctuation">..</span>/certs/kube-proxy-client.pem \  --client-key<span class="token operator">=</span><span class="token punctuation">..</span>/certs/kube-proxy-client-key.pem \  --embed-certs<span class="token operator">=</span>true \  --kubeconfig<span class="token operator">=</span>kube-proxy.kubeconfigkubectl config set-context myk8s-context \  --cluster<span class="token operator">=</span>myk8s \  --user<span class="token operator">=</span>kube-proxy \  --kubeconfig<span class="token operator">=</span>kube-proxy.kubeconfig  kubectl config use-context myk8s-context --kubeconfig<span class="token operator">=</span>kube-proxy.kubeconfig<span class="token function">scp</span> -p kube-proxy.kubeconfig 192.168.92.156:/opt/kubernetes/server/bin/conf/<span class="token function">scp</span> -p kube-proxy.kubeconfig 192.168.92.157:/opt/kubernetes/server/bin/conf/</code></pre><h6 id="编辑启动脚本：-3"><a href="#编辑启动脚本：-3" class="headerlink" title="编辑启动脚本："></a>编辑启动脚本：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> <span class="token punctuation">..</span>/kube-proxy.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/bin/sh./kube-proxy \  --cluster-cidr 172.92.0.0/16 \  --hostname-override  k8s-master4 \  --proxy-mode=ipvs \  --ipvs-scheduler=nq \  --kubeconfig ./conf/kube-proxy.kubeconfigEOF</span><span class="token function">chmod</span> +x <span class="token punctuation">..</span>/kube-proxy.sh</code></pre><h6 id="编辑supervisor管理配置：-2"><a href="#编辑supervisor管理配置：-2" class="headerlink" title="编辑supervisor管理配置："></a>编辑supervisor管理配置：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/supervisord.d/kube-proxy.ini <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[program:kube-proxy]command=/opt/kubernetes/server/bin/kube-proxy.shnumprocs=1directory=/opt/kubernetes/server/binautostart=trueautorestart=truestartsecs=30startretries=3exitcodes=0,2stopsignal=QUITstopwaitsecs=10user=rootredirect_stderr=truekillasgroup=truestopasgroup=truestdout_logfile=/data/logs/kubernetes/kube-proxy/proxy.stdout.logstdout_logfile_maxbytes=64MBstdout_logfile_backups=4stdout_capture_maxbytes=1MBstdout_events_enabled=falseEOF</span></code></pre><h6 id="启动与检查：-2"><a href="#启动与检查：-2" class="headerlink" title="启动与检查："></a>启动与检查：</h6><pre class=" language-bash"><code class="language-bash">supervisorctl updatesupervisorctl status<span class="token function">tail</span> -fn20 /data/logs/kubernetes/kube-proxy/proxy.stdout.log</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014105908239.png" alt="image-20211014105908239"></p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014105949903.png" alt="image-20211014105949903"></p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014110016777.png" alt="image-20211014110016777"></p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014110047627.png" alt="image-20211014110047627"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 编辑一个简单的nginx资源清单</span><span class="token function">cat</span> ds.yaml apiVersion: apps/v1kind: DaemonSetmetadata:  name: nginx-dsspec:  selector:    matchLabels:      app: nginx-ds  template:    metadata:      labels:        app: nginx-ds    spec:      containers:      - name: my-nginx        image: nginx:latest        ports:        - containerPort: 80<span class="token comment" spellcheck="true"># 引用ds.yaml资源清单</span>kubectl apply -f ds.yaml<span class="token comment" spellcheck="true"># 查看nginx pod 状态</span>kubectl get pods -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014121809579.png" alt="image-20211014121809579"></p><p>这时候可以看到各节点的pod创建是<code>Running</code>状态但是分配的IP相同，都是10.88.xx.xx网段。这是因为containerd自带的cni插件配置<code>/etc/cni/net.d/10-containerd-net.conflist</code>导致，我们可以来看下这个文件。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/cni/net.d/10-containerd-net.conflist<span class="token punctuation">{</span>  <span class="token string">"cniVersion"</span><span class="token keyword">:</span> <span class="token string">"0.4.0"</span>,  <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"containerd-net"</span>,  <span class="token string">"plugins"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"bridge"</span>,      <span class="token string">"bridge"</span><span class="token keyword">:</span> <span class="token string">"cni0"</span>,      <span class="token string">"isGateway"</span><span class="token keyword">:</span> true,      <span class="token string">"ipMasq"</span><span class="token keyword">:</span> true,      <span class="token string">"promiscMode"</span><span class="token keyword">:</span> true,      <span class="token string">"ipam"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"host-local"</span>,        <span class="token string">"ranges"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">[</span><span class="token punctuation">{</span>            <span class="token string">"subnet"</span><span class="token keyword">:</span> <span class="token string">"10.88.0.0/16"</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>,          <span class="token punctuation">[</span><span class="token punctuation">{</span>            <span class="token string">"subnet"</span><span class="token keyword">:</span> <span class="token string">"2001:4860:4860::/64"</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>,        <span class="token string">"routes"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> <span class="token string">"dst"</span><span class="token keyword">:</span> <span class="token string">"0.0.0.0/0"</span> <span class="token punctuation">}</span>,          <span class="token punctuation">{</span> <span class="token string">"dst"</span><span class="token keyword">:</span> <span class="token string">"::/0"</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"portmap"</span>,      <span class="token string">"capabilities"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token string">"portMappings"</span><span class="token keyword">:</span> true<span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>可以看到 <code>/etc/cni/net.d/10-containerd-net.conflist</code> 这个文件中已经定义了 <code>subnet</code> 网段恰好就是 <code>10.88.0.0/16</code> ，网桥名称为 <code>cni0</code> , 网络类型为 <code>bridge</code> 但是使用bridge 网络的容器无法跨多个宿主机进行通信，跨主机通信需要借助其他的 cni 插件，比如我们下面要安装的 Flannel，或者Calico 等等。</p><h4 id="四、部署网络插件"><a href="#四、部署网络插件" class="headerlink" title="四、部署网络插件"></a>四、部署网络插件</h4><h5 id="1-安装Flannel插件"><a href="#1-安装Flannel插件" class="headerlink" title="1. 安装Flannel插件"></a>1. 安装Flannel插件</h5><h6 id="节点规划："><a href="#节点规划：" class="headerlink" title="节点规划："></a>节点规划：</h6><table><thead><tr><th>主机</th><th>IP</th><th>角色</th></tr></thead><tbody><tr><td>k8s-master4</td><td>192.168.92.155</td><td>flannel</td></tr><tr><td>k8s-node4-1</td><td>192.168.92.156</td><td>flannel</td></tr><tr><td>k8s-node4-2</td><td>192.168.92.157</td><td>flannel</td></tr></tbody></table><h6 id="下载软件包、解压、做软链接："><a href="#下载软件包、解压、做软链接：" class="headerlink" title="下载软件包、解压、做软链接："></a>下载软件包、解压、做软链接：</h6><p><a href="https://github.com/flannel-io/flannel/releases">flannel 下载链接</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/src<span class="token function">wget</span> https://github.com/flannel-io/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz<span class="token function">mkdir</span> /opt/flannel-v0.11.0<span class="token function">tar</span> -xf flannel-v0.11.0-linux-amd64.tar.gz -C /opt/flannel-v0.11.0<span class="token function">ln</span> -s /opt/flannel-v0.11.0 /opt/flannel</code></pre><h6 id="拷贝证书、秘钥："><a href="#拷贝证书、秘钥：" class="headerlink" title="拷贝证书、秘钥："></a>拷贝证书、秘钥：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/flannel<span class="token function">mkdir</span> certs<span class="token function">cp</span> -p /opt/certs/ca.pem /opt/certs/client.pem /opt/certs/client-key.pem  /opt/flannel/certs/<span class="token comment" spellcheck="true"># 拷贝至其他主机节点</span><span class="token function">scp</span> -rp /opt/flannel/certs 192.168.92.156:/opt/flannel/<span class="token function">scp</span> -rp /opt/flannel/certs 192.168.92.157:/opt/flannel/</code></pre><h6 id="编辑配置文件：-1"><a href="#编辑配置文件：-1" class="headerlink" title="编辑配置文件："></a>编辑配置文件：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> subnet.env <span class="token operator">&lt;&lt;</span> <span class="token string">EOFFLANNEL_NETWORK=172.92.0.0/16FLANNEL_SUBNET=172.92.155.1/24FLANNEL_MTU=1500FLANNEL_IPMASQ=falseEOF</span></code></pre><h6 id="编辑启动脚本：-4"><a href="#编辑启动脚本：-4" class="headerlink" title="编辑启动脚本："></a>编辑启动脚本：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> flanneld.sh <span class="token comment" spellcheck="true">#!/bin/sh</span>./flanneld \  --public-ip<span class="token operator">=</span>192.168.92.155 \  --etcd-endpoints<span class="token operator">=</span>https://192.168.92.155:2379,https://192.168.92.156:2379,https://192.168.92.157:2379 \  --etcd-keyfile<span class="token operator">=</span>./certs/client-key.pem \  --etcd-certfile<span class="token operator">=</span>./certs/client.pem \  --etcd-cafile<span class="token operator">=</span>./certs/ca.pem \  --iface<span class="token operator">=</span>ens32 \  --subnet-file<span class="token operator">=</span>./subnet.env \  --healthz-port<span class="token operator">=</span>2401EOF<span class="token comment" spellcheck="true"># 给权限</span><span class="token function">chmod</span> +x flanneld.sh</code></pre><h6 id="编辑supervisor管理配置：-3"><a href="#编辑supervisor管理配置：-3" class="headerlink" title="编辑supervisor管理配置："></a>编辑supervisor管理配置：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/supervisord.d/flannel.ini <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[program:flanneld]command=/opt/flannel/flanneld.sh                             ; the program (relative uses PATH, can take args)numprocs=1                                                   ; number of processes copies to start (def 1)directory=/opt/flannel                                       ; directory to cwd to before exec (def no cwd)autostart=true                                               ; start at supervisord start (default: true)autorestart=true                                             ; retstart at unexpected quit (default: true)startsecs=30                                                 ; number of secs prog must stay running (def. 1)startretries=3                                               ; max # of serial start failures (default 3)exitcodes=0,2                                                ; 'expected' exit codes for process (default 0,2)stopsignal=QUIT                                              ; signal used to kill process (default TERM)stopwaitsecs=10                                              ; max num secs to wait b4 SIGKILL (default 10)user=root                                                    ; setuid to this UNIX account to run the programredirect_stderr=true                                         ; redirect proc stderr to stdout (default false)killasgroup=true                                             ; kill all process in a groupstopasgroup=true                                             ; stop all process in a groupstdout_logfile=/data/logs/flanneld/flanneld.stdout.log       ; stderr log path, NONE for none; default AUTOstdout_logfile_maxbytes=64MB                                 ; max # logfile bytes b4 rotation (default 50MB)stdout_logfile_backups=4                                     ; # of stdout logfile backups (default 10)stdout_capture_maxbytes=1MB                                  ; number of bytes in 'capturemode' (default 0)stdout_events_enabled=false                                  ; emit events on stdout writes (default false)EOF</span><span class="token comment" spellcheck="true"># 创建目录</span><span class="token function">mkdir</span> -p /data/logs/flanneld</code></pre><h6 id="修改CNI配置："><a href="#修改CNI配置：" class="headerlink" title="修改CNI配置："></a>修改CNI配置：</h6><p>修改后如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/cni/net.d/10-containerd-net.conflist <span class="token punctuation">{</span>  <span class="token string">"cniVersion"</span><span class="token keyword">:</span> <span class="token string">"0.4.0"</span>,  <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"containerd-net"</span>,  <span class="token string">"plugins"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"bridge"</span>,      <span class="token string">"bridge"</span><span class="token keyword">:</span> <span class="token string">"cni0"</span>,      <span class="token string">"isGateway"</span><span class="token keyword">:</span> true,      <span class="token string">"ipMasq"</span><span class="token keyword">:</span> true,      <span class="token string">"promiscMode"</span><span class="token keyword">:</span> true,      <span class="token string">"ipam"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"host-local"</span>,        <span class="token string">"ranges"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">[</span><span class="token punctuation">{</span>            <span class="token string">"subnet"</span><span class="token keyword">:</span> <span class="token string">"172.92.155.0/24"</span>          <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>,        <span class="token string">"routes"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> <span class="token string">"dst"</span><span class="token keyword">:</span> <span class="token string">"0.0.0.0/0"</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"portmap"</span>,      <span class="token string">"capabilities"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token string">"portMappings"</span><span class="token keyword">:</span> true<span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>注：</strong>这里的<code>subnet</code>网段尽量根据宿主机<code>IP</code>的最后两位定义，这样便于pod出错后快速定位主机。</p><h6 id="重启containerd："><a href="#重启containerd：" class="headerlink" title="重启containerd："></a>重启containerd：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">ifconfig</span> cni0 down <span class="token operator">&amp;&amp;</span> ip <span class="token function">link</span> del cni0systemctl restart containerdsupervisorctl restart kube-kubelet</code></pre><h6 id="启动flanneld并检查："><a href="#启动flanneld并检查：" class="headerlink" title="启动flanneld并检查："></a>启动flanneld并检查：</h6><pre class=" language-bash"><code class="language-bash">supervisorctl updatesupervisorctl status</code></pre><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014154326846.png" alt="image-20211014154326846" style="zoom: 80%;"><pre class=" language-bash"><code class="language-bash">kubectl get pod -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014154957780.png" alt="image-20211014154957780"></p><h5 id="2-向平台交付coredns插件"><a href="#2-向平台交付coredns插件" class="headerlink" title="2. 向平台交付coredns插件"></a>2. 向平台交付coredns插件</h5><h6 id="资源清单创建："><a href="#资源清单创建：" class="headerlink" title="资源清单创建："></a>资源清单创建：</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mkdir -p /data/yaml/coredns</span><span class="token function">cat</span> <span class="token operator">></span> /etc/nginx/conf.d/k8s-yaml.hcloud.com.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFserver {    listen 80;    server_name k8s-yaml.hcloud.com;    location / {        autoindex on;        default_type text/plain;        root /data/yaml;   }}EOF</span><span class="token comment" spellcheck="true"># 重启nginx</span>nginx -s reload<span class="token function">cd</span> /data/yaml/coredns/</code></pre><h6 id="创建rbac-yaml"><a href="#创建rbac-yaml" class="headerlink" title="创建rbac.yaml:"></a>创建rbac.yaml:</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /data/yaml/coredns/rbac.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: v1kind: ServiceAccountmetadata:  name: coredns  namespace: kube-system  labels:      kubernetes.io/cluster-service: "true"      addonmanager.kubernetes.io/mode: Reconcile---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRolemetadata:  labels:    kubernetes.io/bootstrapping: rbac-defaults    addonmanager.kubernetes.io/mode: Reconcile  name: system:corednsrules:- apiGroups:  - ""  resources:  - endpoints  - services  - pods  - namespaces  verbs:  - list  - watch---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  annotations:    rbac.authorization.kubernetes.io/autoupdate: "true"  labels:    kubernetes.io/bootstrapping: rbac-defaults    addonmanager.kubernetes.io/mode: EnsureExists  name: system:corednsroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: system:corednssubjects:- kind: ServiceAccount  name: coredns  namespace: kube-systemEOF</span></code></pre><h6 id="创建cm-yaml"><a href="#创建cm-yaml" class="headerlink" title="创建cm.yaml:"></a>创建cm.yaml:</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /data/yaml/coredns/cm.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: v1kind: ConfigMapmetadata:  name: coredns  namespace: kube-systemdata:  Corefile: |    .:53 {        errors        log        health        ready        kubernetes cluster.local 10.96.0.0/22        forward . 192.168.92.2        cache 30        loop        reload        loadbalance       }EOF</span></code></pre><h6 id="创建dp-yaml："><a href="#创建dp-yaml：" class="headerlink" title="创建dp.yaml："></a>创建dp.yaml：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /data/yaml/coredns/dp.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: apps/v1kind: Deploymentmetadata:  name: coredns  namespace: kube-system  labels:    k8s-app: coredns    kubernetes.io/name: "CoreDNS"spec:  replicas: 1  selector:    matchLabels:      k8s-app: coredns  template:    metadata:      labels:        k8s-app: coredns    spec:      priorityClassName: system-cluster-critical      serviceAccountName: coredns      containers:      - name: coredns        image: docker.io/coredns/coredns:1.6.1        args:        - -conf        - /etc/coredns/Corefile        volumeMounts:        - name: config-volume          mountPath: /etc/coredns        ports:        - containerPort: 53          name: dns          protocol: UDP        - containerPort: 53          name: dns-tcp          protocol: TCP        - containerPort: 9153          name: metrics          protocol: TCP        livenessProbe:          httpGet:            path: /health            port: 8080            scheme: HTTP          initialDelaySeconds: 60          timeoutSeconds: 5          successThreshold: 1          failureThreshold: 5      dnsPolicy: Default      volumes:        - name: config-volume          configMap:            name: coredns            items:            - key: Corefile              path: CorefileEOF</span></code></pre><h6 id="创建svc-yaml："><a href="#创建svc-yaml：" class="headerlink" title="创建svc.yaml："></a>创建svc.yaml：</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /data/yaml/coredns/svc.yaml <span class="token operator">&lt;&lt;</span> <span class="token string">EOFapiVersion: v1kind: Servicemetadata:  name: coredns  namespace: kube-system  labels:    k8s-app: coredns    kubernetes.io/cluster-service: "true"    kubernetes.io/name: "CoreDNS"spec:  selector:    k8s-app: coredns  clusterIP: 10.96.0.2  ports:  - name: dns    port: 53    protocol: UDP  - name: dns-tcp    port: 53  - name: metrics    port: 9153    protocol: TCPEOF</span></code></pre><h6 id="交付插件："><a href="#交付插件：" class="headerlink" title="交付插件："></a>交付插件：</h6><pre class=" language-bash"><code class="language-bash">kubectl apply -f /data/yaml/coredns/rbac.yamlkubectl apply -f /data/yaml/coredns/cm.yamlkubectl apply -f /data/yaml/coredns/dp.yamlkubectl apply -f /data/yaml/coredns/svc.yml</code></pre><h6 id="测试检查："><a href="#测试检查：" class="headerlink" title="测试检查："></a>测试检查：</h6><pre class=" language-bash"><code class="language-bash">kubectl get pods -n kube-system</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211015144950126.png" alt="image-20211015144950126"></p><p>解析检查如下图：</p><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211015145614866.png" alt="image-20211015145614866"></p><p>现在k8s集群已经部署完成，但是为了更方便的使用后面会交付<code>traefik</code>、<code>dashboard</code>、<code>prometheus</code>、<code>efk</code> 等服务。下面是是针对整个集群的环境检查。</p><h4 id="五、集群整体环境检查"><a href="#五、集群整体环境检查" class="headerlink" title="五、集群整体环境检查"></a>五、集群整体环境检查</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看个进程状态</span>supervisorctl status</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014175206117.png" alt="image-20211014175206117"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看网络状态</span>ip addr</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014180315098.png" alt="image-20211014180315098"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看路由规则</span>route -n</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014180206102.png" alt="image-20211014180206102"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看集群节点与组件状态</span>kubectl get cskubectl get nodes -o widekubectl get pods -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014180722612.png" alt="image-20211014180722612"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看pod信息状态</span>kubectl get pods -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014181210572.png" alt="image-20211014181210572"></p><h5 id="测试pod之间网络互通"><a href="#测试pod之间网络互通" class="headerlink" title="测试pod之间网络互通"></a>测试pod之间网络互通</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动一个用来测试的pod</span>kubectl run my-test --image<span class="token operator">=</span>busybox -- <span class="token function">tail</span> -f /dev/nullkubectl get pods -o wide</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014182031681.png" alt="image-20211014182031681"></p><p>这里我们可以看到新pod在<code>k8s-node4-2</code>节点上，接下来进入用来测试的<code>pod</code>去<code>ping</code>其他3个节点上的pod。</p><pre class=" language-bash"><code class="language-bash">kubectl <span class="token function">exec</span> -it my-test-f84cbcd45-rcvcg -- sh</code></pre><p><img src="https://aptxhb.oss-cn-shenzhen.aliyuncs.com/images/image-20211014182727696.png" alt="image-20211014182727696"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
